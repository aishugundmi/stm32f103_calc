
7 uart_calc_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08001d74  08001d74  00011d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001da8  08001da8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001da8  08001da8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001da8  08001da8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001da8  08001da8  00011da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001dac  08001dac  00011dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000000c  08001dbc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08001dbc  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005f2a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000175f  00000000  00000000  00025f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000670  00000000  00000000  000276c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005a8  00000000  00000000  00027d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015ae3  00000000  00000000  000282d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000061be  00000000  00000000  0003ddbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f22b  00000000  00000000  00043f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b31a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017ec  00000000  00000000  000b3220  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d5c 	.word	0x08001d5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001d5c 	.word	0x08001d5c

0800014c <fifo_write_byte>:
int write_index;
int read_index;
uint8_t unread_count;

int fifo_write_byte(uint8_t byte)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]

    int ret = -1;  //init return with error
 8000156:	f04f 33ff 	mov.w	r3, #4294967295
 800015a:	60fb      	str	r3, [r7, #12]
    //if no space in fifo, return error
    if(fifo_data_available() >= FIFO_SIZE)
 800015c:	f000 f85c 	bl	8000218 <fifo_data_available>
 8000160:	4603      	mov	r3, r0
 8000162:	2b63      	cmp	r3, #99	; 0x63
 8000164:	dd01      	ble.n	800016a <fifo_write_byte+0x1e>
    {
        return ret;
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	e019      	b.n	800019e <fifo_write_byte+0x52>
    }
    //write data to fifo
    buff[write_index] = byte;
 800016a:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <fifo_write_byte+0x5c>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	490f      	ldr	r1, [pc, #60]	; (80001ac <fifo_write_byte+0x60>)
 8000170:	79fa      	ldrb	r2, [r7, #7]
 8000172:	54ca      	strb	r2, [r1, r3]

    //increment unread count
    unread_count++;
 8000174:	4b0e      	ldr	r3, [pc, #56]	; (80001b0 <fifo_write_byte+0x64>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	3301      	adds	r3, #1
 800017a:	b2da      	uxtb	r2, r3
 800017c:	4b0c      	ldr	r3, [pc, #48]	; (80001b0 <fifo_write_byte+0x64>)
 800017e:	701a      	strb	r2, [r3, #0]

    //increament write index and check if it is overflowing, if so make it zero
    write_index++;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <fifo_write_byte+0x5c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	3301      	adds	r3, #1
 8000186:	4a08      	ldr	r2, [pc, #32]	; (80001a8 <fifo_write_byte+0x5c>)
 8000188:	6013      	str	r3, [r2, #0]
    if(write_index >= FIFO_SIZE)
 800018a:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <fifo_write_byte+0x5c>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b63      	cmp	r3, #99	; 0x63
 8000190:	dd02      	ble.n	8000198 <fifo_write_byte+0x4c>
    {
        write_index = 0;
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <fifo_write_byte+0x5c>)
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
    }

    ret = 0;
 8000198:	2300      	movs	r3, #0
 800019a:	60fb      	str	r3, [r7, #12]
    return ret;
 800019c:	68fb      	ldr	r3, [r7, #12]

}
 800019e:	4618      	mov	r0, r3
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000028 	.word	0x20000028
 80001ac:	20000030 	.word	0x20000030
 80001b0:	20000094 	.word	0x20000094

080001b4 <fifo_read_byte>:

int fifo_read_byte(void)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0

	uint8_t byte;

    int ret = -1;  //return -1 if no data to read. If not, copy the uint8_t byte to int variable and return.
 80001ba:	f04f 33ff 	mov.w	r3, #4294967295
 80001be:	607b      	str	r3, [r7, #4]
                    //so that if the return is not -1, then consider it as a valid data byte,(0 to 0xff),
    if(unread_count == 0)
 80001c0:	4b12      	ldr	r3, [pc, #72]	; (800020c <fifo_read_byte+0x58>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d101      	bne.n	80001cc <fifo_read_byte+0x18>
    {
        return ret;
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	e019      	b.n	8000200 <fifo_read_byte+0x4c>
    }

    byte = buff[read_index];
 80001cc:	4b10      	ldr	r3, [pc, #64]	; (8000210 <fifo_read_byte+0x5c>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a10      	ldr	r2, [pc, #64]	; (8000214 <fifo_read_byte+0x60>)
 80001d2:	5cd3      	ldrb	r3, [r2, r3]
 80001d4:	70fb      	strb	r3, [r7, #3]

    read_index++;
 80001d6:	4b0e      	ldr	r3, [pc, #56]	; (8000210 <fifo_read_byte+0x5c>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	3301      	adds	r3, #1
 80001dc:	4a0c      	ldr	r2, [pc, #48]	; (8000210 <fifo_read_byte+0x5c>)
 80001de:	6013      	str	r3, [r2, #0]
    unread_count--;
 80001e0:	4b0a      	ldr	r3, [pc, #40]	; (800020c <fifo_read_byte+0x58>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	3b01      	subs	r3, #1
 80001e6:	b2da      	uxtb	r2, r3
 80001e8:	4b08      	ldr	r3, [pc, #32]	; (800020c <fifo_read_byte+0x58>)
 80001ea:	701a      	strb	r2, [r3, #0]

    if(read_index >= FIFO_SIZE)
 80001ec:	4b08      	ldr	r3, [pc, #32]	; (8000210 <fifo_read_byte+0x5c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	2b63      	cmp	r3, #99	; 0x63
 80001f2:	dd02      	ble.n	80001fa <fifo_read_byte+0x46>
    {
        read_index = 0;
 80001f4:	4b06      	ldr	r3, [pc, #24]	; (8000210 <fifo_read_byte+0x5c>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
    }

    ret = (int)(byte);
 80001fa:	78fb      	ldrb	r3, [r7, #3]
 80001fc:	607b      	str	r3, [r7, #4]
  //  uprintf(ret);
    return ret;
 80001fe:	687b      	ldr	r3, [r7, #4]

}
 8000200:	4618      	mov	r0, r3
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	20000094 	.word	0x20000094
 8000210:	2000002c 	.word	0x2000002c
 8000214:	20000030 	.word	0x20000030

08000218 <fifo_data_available>:

int fifo_data_available(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
    return unread_count;
 800021c:	4b02      	ldr	r3, [pc, #8]	; (8000228 <fifo_data_available+0x10>)
 800021e:	781b      	ldrb	r3, [r3, #0]
}
 8000220:	4618      	mov	r0, r3
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	20000094 	.word	0x20000094

0800022c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000230:	4b04      	ldr	r3, [pc, #16]	; (8000244 <__NVIC_GetPriorityGrouping+0x18>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	0a1b      	lsrs	r3, r3, #8
 8000236:	f003 0307 	and.w	r3, r3, #7
}
 800023a:	4618      	mov	r0, r3
 800023c:	46bd      	mov	sp, r7
 800023e:	bc80      	pop	{r7}
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	e000ed00 	.word	0xe000ed00

08000248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000256:	2b00      	cmp	r3, #0
 8000258:	db0b      	blt.n	8000272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	f003 021f 	and.w	r2, r3, #31
 8000260:	4906      	ldr	r1, [pc, #24]	; (800027c <__NVIC_EnableIRQ+0x34>)
 8000262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000266:	095b      	lsrs	r3, r3, #5
 8000268:	2001      	movs	r0, #1
 800026a:	fa00 f202 	lsl.w	r2, r0, r2
 800026e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000272:	bf00      	nop
 8000274:	370c      	adds	r7, #12
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr
 800027c:	e000e100 	.word	0xe000e100

08000280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	6039      	str	r1, [r7, #0]
 800028a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000290:	2b00      	cmp	r3, #0
 8000292:	db0a      	blt.n	80002aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	b2da      	uxtb	r2, r3
 8000298:	490c      	ldr	r1, [pc, #48]	; (80002cc <__NVIC_SetPriority+0x4c>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	0112      	lsls	r2, r2, #4
 80002a0:	b2d2      	uxtb	r2, r2
 80002a2:	440b      	add	r3, r1
 80002a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002a8:	e00a      	b.n	80002c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	4908      	ldr	r1, [pc, #32]	; (80002d0 <__NVIC_SetPriority+0x50>)
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	f003 030f 	and.w	r3, r3, #15
 80002b6:	3b04      	subs	r3, #4
 80002b8:	0112      	lsls	r2, r2, #4
 80002ba:	b2d2      	uxtb	r2, r2
 80002bc:	440b      	add	r3, r1
 80002be:	761a      	strb	r2, [r3, #24]
}
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	e000e100 	.word	0xe000e100
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b089      	sub	sp, #36	; 0x24
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	f003 0307 	and.w	r3, r3, #7
 80002e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002e8:	69fb      	ldr	r3, [r7, #28]
 80002ea:	f1c3 0307 	rsb	r3, r3, #7
 80002ee:	2b04      	cmp	r3, #4
 80002f0:	bf28      	it	cs
 80002f2:	2304      	movcs	r3, #4
 80002f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002f6:	69fb      	ldr	r3, [r7, #28]
 80002f8:	3304      	adds	r3, #4
 80002fa:	2b06      	cmp	r3, #6
 80002fc:	d902      	bls.n	8000304 <NVIC_EncodePriority+0x30>
 80002fe:	69fb      	ldr	r3, [r7, #28]
 8000300:	3b03      	subs	r3, #3
 8000302:	e000      	b.n	8000306 <NVIC_EncodePriority+0x32>
 8000304:	2300      	movs	r3, #0
 8000306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000308:	f04f 32ff 	mov.w	r2, #4294967295
 800030c:	69bb      	ldr	r3, [r7, #24]
 800030e:	fa02 f303 	lsl.w	r3, r2, r3
 8000312:	43da      	mvns	r2, r3
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	401a      	ands	r2, r3
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800031c:	f04f 31ff 	mov.w	r1, #4294967295
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	fa01 f303 	lsl.w	r3, r1, r3
 8000326:	43d9      	mvns	r1, r3
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800032c:	4313      	orrs	r3, r2
         );
}
 800032e:	4618      	mov	r0, r3
 8000330:	3724      	adds	r7, #36	; 0x24
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr

08000338 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	60da      	str	r2, [r3, #12]
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr

08000356 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000356:	b480      	push	{r7}
 8000358:	b083      	sub	sp, #12
 800035a:	af00      	add	r7, sp, #0
 800035c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	691b      	ldr	r3, [r3, #16]
 8000362:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	615a      	str	r2, [r3, #20]
}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr

08000380 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f003 0320 	and.w	r3, r3, #32
 8000390:	2b20      	cmp	r3, #32
 8000392:	bf0c      	ite	eq
 8000394:	2301      	moveq	r3, #1
 8000396:	2300      	movne	r3, #0
 8000398:	b2db      	uxtb	r3, r3
}
 800039a:	4618      	mov	r0, r3
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr

080003a4 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003b4:	2b80      	cmp	r3, #128	; 0x80
 80003b6:	bf0c      	ite	eq
 80003b8:	2301      	moveq	r3, #1
 80003ba:	2300      	movne	r3, #0
 80003bc:	b2db      	uxtb	r3, r3
}
 80003be:	4618      	mov	r0, r3
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr

080003c8 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	68db      	ldr	r3, [r3, #12]
 80003d4:	f043 0220 	orr.w	r2, r3, #32
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	60da      	str	r2, [r3, #12]
}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bc80      	pop	{r7}
 80003e4:	4770      	bx	lr

080003e6 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
 80003e6:	b480      	push	{r7}
 80003e8:	b083      	sub	sp, #12
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	68db      	ldr	r3, [r3, #12]
 80003f2:	f003 0320 	and.w	r3, r3, #32
 80003f6:	2b20      	cmp	r3, #32
 80003f8:	bf0c      	ite	eq
 80003fa:	2301      	moveq	r3, #1
 80003fc:	2300      	movne	r3, #0
 80003fe:	b2db      	uxtb	r3, r3
}
 8000400:	4618      	mov	r0, r3
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr

0800040a <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 800040a:	b480      	push	{r7}
 800040c:	b083      	sub	sp, #12
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	b2db      	uxtb	r3, r3
}
 8000418:	4618      	mov	r0, r3
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr

08000422 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000422:	b480      	push	{r7}
 8000424:	b083      	sub	sp, #12
 8000426:	af00      	add	r7, sp, #0
 8000428:	6078      	str	r0, [r7, #4]
 800042a:	460b      	mov	r3, r1
 800042c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800042e:	78fa      	ldrb	r2, [r7, #3]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	605a      	str	r2, [r3, #4]
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr
	...

08000440 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <LL_APB2_GRP1_EnableClock+0x2c>)
 800044a:	699a      	ldr	r2, [r3, #24]
 800044c:	4907      	ldr	r1, [pc, #28]	; (800046c <LL_APB2_GRP1_EnableClock+0x2c>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4313      	orrs	r3, r2
 8000452:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000456:	699a      	ldr	r2, [r3, #24]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4013      	ands	r3, r2
 800045c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800045e:	68fb      	ldr	r3, [r7, #12]
}
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40021000 	.word	0x40021000

08000470 <USART1_IRQHandler>:
  * @brief  The application entry point.
  * @retval int
  */

void USART1_IRQHandler(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	if (LL_USART_IsActiveFlag_RXNE (USART1) && LL_USART_IsEnabledIT_RXNE (USART1))
 8000474:	480e      	ldr	r0, [pc, #56]	; (80004b0 <USART1_IRQHandler+0x40>)
 8000476:	f7ff ff83 	bl	8000380 <LL_USART_IsActiveFlag_RXNE>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d011      	beq.n	80004a4 <USART1_IRQHandler+0x34>
 8000480:	480b      	ldr	r0, [pc, #44]	; (80004b0 <USART1_IRQHandler+0x40>)
 8000482:	f7ff ffb0 	bl	80003e6 <LL_USART_IsEnabledIT_RXNE>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d00b      	beq.n	80004a4 <USART1_IRQHandler+0x34>
	{
	        bufbyte = LL_USART_ReceiveData8 (USART1);
 800048c:	4808      	ldr	r0, [pc, #32]	; (80004b0 <USART1_IRQHandler+0x40>)
 800048e:	f7ff ffbc 	bl	800040a <LL_USART_ReceiveData8>
 8000492:	4603      	mov	r3, r0
 8000494:	461a      	mov	r2, r3
 8000496:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <USART1_IRQHandler+0x44>)
 8000498:	701a      	strb	r2, [r3, #0]
	        fifo_write_byte(bufbyte);
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <USART1_IRQHandler+0x44>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff fe54 	bl	800014c <fifo_write_byte>
	};
	ch = 1;
 80004a4:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <USART1_IRQHandler+0x48>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART1_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40013800 	.word	0x40013800
 80004b4:	2000009c 	.word	0x2000009c
 80004b8:	20000238 	.word	0x20000238

080004bc <UART1_PutChar>:
		LL_USART_TransmitData8(USART1, *p++);
	}
}

void UART1_PutChar(uint8_t data)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART1, data);
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	4619      	mov	r1, r3
 80004ca:	4807      	ldr	r0, [pc, #28]	; (80004e8 <UART1_PutChar+0x2c>)
 80004cc:	f7ff ffa9 	bl	8000422 <LL_USART_TransmitData8>
	/* Wait for TXE flag to be raised */
	while (!LL_USART_IsActiveFlag_TXE(USART1));
 80004d0:	bf00      	nop
 80004d2:	4805      	ldr	r0, [pc, #20]	; (80004e8 <UART1_PutChar+0x2c>)
 80004d4:	f7ff ff66 	bl	80003a4 <LL_USART_IsActiveFlag_TXE>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d0f9      	beq.n	80004d2 <UART1_PutChar+0x16>
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40013800 	.word	0x40013800

080004ec <UART1_PutStr>:

void UART1_PutStr(char *string)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	while(*string != '\0') UART1_PutChar(*string++);
 80004f4:	e006      	b.n	8000504 <UART1_PutStr+0x18>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	1c5a      	adds	r2, r3, #1
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff ffdc 	bl	80004bc <UART1_PutChar>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d1f4      	bne.n	80004f6 <UART1_PutStr+0xa>
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <main>:




int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fa35 	bl	8000988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f87d 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f929 	bl	8000778 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000526:	f000 f8bf 	bl	80006a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_USART_EnableIT_RXNE (USART1);
 800052a:	4834      	ldr	r0, [pc, #208]	; (80005fc <main+0xe8>)
 800052c:	f7ff ff4c 	bl	80003c8 <LL_USART_EnableIT_RXNE>
  /* USER CODE END 2 */

//  uart_send_string("histm\n");
  UART1_PutStr("histm\n");
 8000530:	4833      	ldr	r0, [pc, #204]	; (8000600 <main+0xec>)
 8000532:	f7ff ffdb 	bl	80004ec <UART1_PutStr>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  	  	  	  	  memset(s1,0,sizeof(s1));
 8000536:	2264      	movs	r2, #100	; 0x64
 8000538:	2100      	movs	r1, #0
 800053a:	4832      	ldr	r0, [pc, #200]	; (8000604 <main+0xf0>)
 800053c:	f001 fc06 	bl	8001d4c <memset>
	  	  	  	  	  uint8_t n=0;
 8000540:	2300      	movs	r3, #0
 8000542:	73fb      	strb	r3, [r7, #15]
	  		  		  while(fifo_data_available())
 8000544:	e009      	b.n	800055a <main+0x46>
	  		  		  {
	  		  		  		 s1[n] = fifo_read_byte();
 8000546:	f7ff fe35 	bl	80001b4 <fifo_read_byte>
 800054a:	4602      	mov	r2, r0
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	b2d1      	uxtb	r1, r2
 8000550:	4a2c      	ldr	r2, [pc, #176]	; (8000604 <main+0xf0>)
 8000552:	54d1      	strb	r1, [r2, r3]
	  		  		  		// UART1_PutChar(s1[n]);
	  		  		  		 n++;
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	3301      	adds	r3, #1
 8000558:	73fb      	strb	r3, [r7, #15]
	  		  		  while(fifo_data_available())
 800055a:	f7ff fe5d 	bl	8000218 <fifo_data_available>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d1f0      	bne.n	8000546 <main+0x32>
	  		  		  }

	  	  	  	  	  while(ch)
 8000564:	e044      	b.n	80005f0 <main+0xdc>
	  	  	  	  	  {

	  	  	  	  		  UART1_PutStr(s1);
 8000566:	4827      	ldr	r0, [pc, #156]	; (8000604 <main+0xf0>)
 8000568:	f7ff ffc0 	bl	80004ec <UART1_PutStr>
	    		 	 	  int i=0, j=0;
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
	    	              b = s_i(s3);
	    	              char bdata[20];
	    	              sprintf(bdata, "b = %d\n", b);
	    	              UART1_PutStr(bdata);  */

	    	              switch(op)
 8000574:	4b24      	ldr	r3, [pc, #144]	; (8000608 <main+0xf4>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	3b2a      	subs	r3, #42	; 0x2a
 800057a:	2b05      	cmp	r3, #5
 800057c:	d834      	bhi.n	80005e8 <main+0xd4>
 800057e:	a201      	add	r2, pc, #4	; (adr r2, 8000584 <main+0x70>)
 8000580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000584:	080005c1 	.word	0x080005c1
 8000588:	0800059d 	.word	0x0800059d
 800058c:	080005e9 	.word	0x080005e9
 8000590:	080005af 	.word	0x080005af
 8000594:	080005e9 	.word	0x080005e9
 8000598:	080005d5 	.word	0x080005d5
	    	              {
	    	                  case '+':
	    	                      c=a+b;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <main+0xf8>)
 800059e:	881a      	ldrh	r2, [r3, #0]
 80005a0:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <main+0xfc>)
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	4413      	add	r3, r2
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	4b1a      	ldr	r3, [pc, #104]	; (8000614 <main+0x100>)
 80005aa:	801a      	strh	r2, [r3, #0]
	    	                    //  uprintf(c);

	    	                  break;
 80005ac:	e01d      	b.n	80005ea <main+0xd6>
	    	                  case '-':
	    	                      c=a-b;
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <main+0xf8>)
 80005b0:	881a      	ldrh	r2, [r3, #0]
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <main+0xfc>)
 80005b4:	881b      	ldrh	r3, [r3, #0]
 80005b6:	1ad3      	subs	r3, r2, r3
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	4b16      	ldr	r3, [pc, #88]	; (8000614 <main+0x100>)
 80005bc:	801a      	strh	r2, [r3, #0]
	    	                   //   uprintf(c);

	    	                  break;
 80005be:	e014      	b.n	80005ea <main+0xd6>
	    	                  case '*':
	    	                      c=a*b;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <main+0xf8>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	4a12      	ldr	r2, [pc, #72]	; (8000610 <main+0xfc>)
 80005c6:	8812      	ldrh	r2, [r2, #0]
 80005c8:	fb02 f303 	mul.w	r3, r2, r3
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <main+0x100>)
 80005d0:	801a      	strh	r2, [r3, #0]
	    	                   //   uprintf(c);

	    	                  break;
 80005d2:	e00a      	b.n	80005ea <main+0xd6>
	    	                  case '/':
	    	                      c=a/b;
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <main+0xf8>)
 80005d6:	881a      	ldrh	r2, [r3, #0]
 80005d8:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <main+0xfc>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <main+0x100>)
 80005e4:	801a      	strh	r2, [r3, #0]
	    	                   //   uprintf(c);

	    	                  break;
 80005e6:	e000      	b.n	80005ea <main+0xd6>
	    	                  default:
	    	                  break;
 80005e8:	bf00      	nop
	    	              }

	    	              ch = 0;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <main+0x104>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	  	  	  	  	  while(ch)
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <main+0x104>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d1b6      	bne.n	8000566 <main+0x52>
  {
 80005f8:	e79d      	b.n	8000536 <main+0x22>
 80005fa:	bf00      	nop
 80005fc:	40013800 	.word	0x40013800
 8000600:	08001d74 	.word	0x08001d74
 8000604:	200000a0 	.word	0x200000a0
 8000608:	20000098 	.word	0x20000098
 800060c:	2000016c 	.word	0x2000016c
 8000610:	2000009a 	.word	0x2000009a
 8000614:	20000104 	.word	0x20000104
 8000618:	20000238 	.word	0x20000238

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b090      	sub	sp, #64	; 0x40
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0318 	add.w	r3, r7, #24
 8000626:	2228      	movs	r2, #40	; 0x28
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f001 fb8e 	bl	8001d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063e:	2301      	movs	r3, #1
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000642:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000658:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800065a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0318 	add.w	r3, r7, #24
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fc47 	bl	8000ef8 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000670:	f000 f8ce 	bl	8000810 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000678:	2302      	movs	r3, #2
 800067a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2102      	movs	r1, #2
 800068e:	4618      	mov	r0, r3
 8000690:	f000 feb2 	bl	80013f8 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800069a:	f000 f8b9 	bl	8000810 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3740      	adds	r7, #64	; 0x40
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08c      	sub	sp, #48	; 0x30
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]
 80006be:	615a      	str	r2, [r3, #20]
 80006c0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80006d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80006d4:	f7ff feb4 	bl	8000440 <LL_APB2_GRP1_EnableClock>
  
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80006d8:	2004      	movs	r0, #4
 80006da:	f7ff feb1 	bl	8000440 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration  
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80006de:	4b22      	ldr	r3, [pc, #136]	; (8000768 <MX_USART1_UART_Init+0xc0>)
 80006e0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80006e2:	2309      	movs	r3, #9
 80006e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80006e6:	2303      	movs	r3, #3
 80006e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	463b      	mov	r3, r7
 80006f0:	4619      	mov	r1, r3
 80006f2:	481e      	ldr	r0, [pc, #120]	; (800076c <MX_USART1_UART_Init+0xc4>)
 80006f4:	f001 f8a2 	bl	800183c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80006f8:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <MX_USART1_UART_Init+0xc8>)
 80006fa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80006fc:	2304      	movs	r3, #4
 80006fe:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	4819      	ldr	r0, [pc, #100]	; (800076c <MX_USART1_UART_Init+0xc4>)
 8000706:	f001 f899 	bl	800183c <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800070a:	f7ff fd8f 	bl	800022c <__NVIC_GetPriorityGrouping>
 800070e:	4603      	mov	r3, r0
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fddd 	bl	80002d4 <NVIC_EncodePriority>
 800071a:	4603      	mov	r3, r0
 800071c:	4619      	mov	r1, r3
 800071e:	2025      	movs	r0, #37	; 0x25
 8000720:	f7ff fdae 	bl	8000280 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000724:	2025      	movs	r0, #37	; 0x25
 8000726:	f7ff fd8f 	bl	8000248 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800072a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800072e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800073c:	230c      	movs	r3, #12
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000740:	2300      	movs	r3, #0
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000744:	2300      	movs	r3, #0
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	4809      	ldr	r0, [pc, #36]	; (8000774 <MX_USART1_UART_Init+0xcc>)
 8000750:	f001 fa78 	bl	8001c44 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000754:	4807      	ldr	r0, [pc, #28]	; (8000774 <MX_USART1_UART_Init+0xcc>)
 8000756:	f7ff fdfe 	bl	8000356 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <MX_USART1_UART_Init+0xcc>)
 800075c:	f7ff fdec 	bl	8000338 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	3730      	adds	r7, #48	; 0x30
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	04020002 	.word	0x04020002
 800076c:	40010800 	.word	0x40010800
 8000770:	04040004 	.word	0x04040004
 8000774:	40013800 	.word	0x40013800

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 0310 	add.w	r3, r7, #16
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <MX_GPIO_Init+0x90>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a1d      	ldr	r2, [pc, #116]	; (8000808 <MX_GPIO_Init+0x90>)
 8000792:	f043 0310 	orr.w	r3, r3, #16
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_GPIO_Init+0x90>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0310 	and.w	r3, r3, #16
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_GPIO_Init+0x90>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a17      	ldr	r2, [pc, #92]	; (8000808 <MX_GPIO_Init+0x90>)
 80007aa:	f043 0320 	orr.w	r3, r3, #32
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_GPIO_Init+0x90>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0320 	and.w	r3, r3, #32
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_GPIO_Init+0x90>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a11      	ldr	r2, [pc, #68]	; (8000808 <MX_GPIO_Init+0x90>)
 80007c2:	f043 0304 	orr.w	r3, r3, #4
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_GPIO_Init+0x90>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0304 	and.w	r3, r3, #4
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007da:	480c      	ldr	r0, [pc, #48]	; (800080c <MX_GPIO_Init+0x94>)
 80007dc:	f000 fb74 	bl	8000ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80007e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2302      	movs	r3, #2
 80007f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 0310 	add.w	r3, r7, #16
 80007f6:	4619      	mov	r1, r3
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_GPIO_Init+0x94>)
 80007fa:	f000 fa0b 	bl	8000c14 <HAL_GPIO_Init>

}
 80007fe:	bf00      	nop
 8000800:	3720      	adds	r7, #32
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000
 800080c:	40011000 	.word	0x40011000

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <HAL_MspInit+0x5c>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	4a14      	ldr	r2, [pc, #80]	; (8000878 <HAL_MspInit+0x5c>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6193      	str	r3, [r2, #24]
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <HAL_MspInit+0x5c>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <HAL_MspInit+0x5c>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <HAL_MspInit+0x5c>)
 8000840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000844:	61d3      	str	r3, [r2, #28]
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <HAL_MspInit+0x5c>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <HAL_MspInit+0x60>)
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	4a04      	ldr	r2, [pc, #16]	; (800087c <HAL_MspInit+0x60>)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr
 8000878:	40021000 	.word	0x40021000
 800087c:	40010000 	.word	0x40010000

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr

0800088c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <HardFault_Handler+0x4>

08000892 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <MemManage_Handler+0x4>

08000898 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <BusFault_Handler+0x4>

0800089e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <UsageFault_Handler+0x4>

080008a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008cc:	f000 f8a2 	bl	8000a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <SystemInit+0x5c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a14      	ldr	r2, [pc, #80]	; (8000930 <SystemInit+0x5c>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <SystemInit+0x5c>)
 80008e6:	685a      	ldr	r2, [r3, #4]
 80008e8:	4911      	ldr	r1, [pc, #68]	; (8000930 <SystemInit+0x5c>)
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <SystemInit+0x60>)
 80008ec:	4013      	ands	r3, r2
 80008ee:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <SystemInit+0x5c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <SystemInit+0x5c>)
 80008f6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80008fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008fe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <SystemInit+0x5c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <SystemInit+0x5c>)
 8000906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800090a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <SystemInit+0x5c>)
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	4a07      	ldr	r2, [pc, #28]	; (8000930 <SystemInit+0x5c>)
 8000912:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000916:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <SystemInit+0x5c>)
 800091a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800091e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <SystemInit+0x64>)
 8000922:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000926:	609a      	str	r2, [r3, #8]
#endif 
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	40021000 	.word	0x40021000
 8000934:	f8ff0000 	.word	0xf8ff0000
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800093c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800093e:	e003      	b.n	8000948 <LoopCopyDataInit>

08000940 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000942:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000944:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000946:	3104      	adds	r1, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000948:	480a      	ldr	r0, [pc, #40]	; (8000974 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800094c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800094e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000950:	d3f6      	bcc.n	8000940 <CopyDataInit>
  ldr r2, =_sbss
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000954:	e002      	b.n	800095c <LoopFillZerobss>

08000956 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000958:	f842 3b04 	str.w	r3, [r2], #4

0800095c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800095e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000960:	d3f9      	bcc.n	8000956 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000962:	f7ff ffb7 	bl	80008d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000966:	f001 f9cd 	bl	8001d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800096a:	f7ff fdd3 	bl	8000514 <main>
  bx lr
 800096e:	4770      	bx	lr
  ldr r3, =_sidata
 8000970:	08001db0 	.word	0x08001db0
  ldr r0, =_sdata
 8000974:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000978:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800097c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000980:	20000240 	.word	0x20000240

08000984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC1_2_IRQHandler>
	...

08000988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_Init+0x28>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_Init+0x28>)
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000998:	2003      	movs	r0, #3
 800099a:	f000 f907 	bl	8000bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099e:	2000      	movs	r0, #0
 80009a0:	f000 f808 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a4:	f7ff ff3a 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40022000 	.word	0x40022000

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x54>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_InitTick+0x58>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f911 	bl	8000bfa <HAL_SYSTICK_Config>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e00e      	b.n	8000a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d80a      	bhi.n	80009fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f000 f8e7 	bl	8000bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <HAL_InitTick+0x5c>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e000      	b.n	8000a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	20000004 	.word	0x20000004

08000a14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_IncTick+0x1c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <HAL_IncTick+0x20>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a03      	ldr	r2, [pc, #12]	; (8000a34 <HAL_IncTick+0x20>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	20000008 	.word	0x20000008
 8000a34:	2000023c 	.word	0x2000023c

08000a38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b02      	ldr	r3, [pc, #8]	; (8000a48 <HAL_GetTick+0x10>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	2000023c 	.word	0x2000023c

08000a4c <__NVIC_SetPriorityGrouping>:
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7e:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	60d3      	str	r3, [r2, #12]
}
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_GetPriorityGrouping>:
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <__NVIC_GetPriorityGrouping+0x18>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	f003 0307 	and.w	r3, r3, #7
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_SetPriority>:
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	db0a      	blt.n	8000ada <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	490c      	ldr	r1, [pc, #48]	; (8000afc <__NVIC_SetPriority+0x4c>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	0112      	lsls	r2, r2, #4
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ad8:	e00a      	b.n	8000af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4908      	ldr	r1, [pc, #32]	; (8000b00 <__NVIC_SetPriority+0x50>)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	3b04      	subs	r3, #4
 8000ae8:	0112      	lsls	r2, r2, #4
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	440b      	add	r3, r1
 8000aee:	761a      	strb	r2, [r3, #24]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <NVIC_EncodePriority>:
{
 8000b04:	b480      	push	{r7}
 8000b06:	b089      	sub	sp, #36	; 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	f1c3 0307 	rsb	r3, r3, #7
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	bf28      	it	cs
 8000b22:	2304      	movcs	r3, #4
 8000b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	2b06      	cmp	r3, #6
 8000b2c:	d902      	bls.n	8000b34 <NVIC_EncodePriority+0x30>
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3b03      	subs	r3, #3
 8000b32:	e000      	b.n	8000b36 <NVIC_EncodePriority+0x32>
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	f04f 32ff 	mov.w	r2, #4294967295
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43da      	mvns	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	401a      	ands	r2, r3
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	43d9      	mvns	r1, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	4313      	orrs	r3, r2
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3724      	adds	r7, #36	; 0x24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b78:	d301      	bcc.n	8000b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00f      	b.n	8000b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <SysTick_Config+0x40>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b86:	210f      	movs	r1, #15
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f7ff ff90 	bl	8000ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <SysTick_Config+0x40>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SysTick_Config+0x40>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ff49 	bl	8000a4c <__NVIC_SetPriorityGrouping>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
 8000bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd4:	f7ff ff5e 	bl	8000a94 <__NVIC_GetPriorityGrouping>
 8000bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	68b9      	ldr	r1, [r7, #8]
 8000bde:	6978      	ldr	r0, [r7, #20]
 8000be0:	f7ff ff90 	bl	8000b04 <NVIC_EncodePriority>
 8000be4:	4602      	mov	r2, r0
 8000be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff5f 	bl	8000ab0 <__NVIC_SetPriority>
}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ffb0 	bl	8000b68 <SysTick_Config>
 8000c08:	4603      	mov	r3, r0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b08b      	sub	sp, #44	; 0x2c
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c26:	e127      	b.n	8000e78 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	69fa      	ldr	r2, [r7, #28]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f040 8116 	bne.w	8000e72 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2b12      	cmp	r3, #18
 8000c4c:	d034      	beq.n	8000cb8 <HAL_GPIO_Init+0xa4>
 8000c4e:	2b12      	cmp	r3, #18
 8000c50:	d80d      	bhi.n	8000c6e <HAL_GPIO_Init+0x5a>
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d02b      	beq.n	8000cae <HAL_GPIO_Init+0x9a>
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d804      	bhi.n	8000c64 <HAL_GPIO_Init+0x50>
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d031      	beq.n	8000cc2 <HAL_GPIO_Init+0xae>
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d01c      	beq.n	8000c9c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c62:	e048      	b.n	8000cf6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d043      	beq.n	8000cf0 <HAL_GPIO_Init+0xdc>
 8000c68:	2b11      	cmp	r3, #17
 8000c6a:	d01b      	beq.n	8000ca4 <HAL_GPIO_Init+0x90>
          break;
 8000c6c:	e043      	b.n	8000cf6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c6e:	4a89      	ldr	r2, [pc, #548]	; (8000e94 <HAL_GPIO_Init+0x280>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d026      	beq.n	8000cc2 <HAL_GPIO_Init+0xae>
 8000c74:	4a87      	ldr	r2, [pc, #540]	; (8000e94 <HAL_GPIO_Init+0x280>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d806      	bhi.n	8000c88 <HAL_GPIO_Init+0x74>
 8000c7a:	4a87      	ldr	r2, [pc, #540]	; (8000e98 <HAL_GPIO_Init+0x284>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d020      	beq.n	8000cc2 <HAL_GPIO_Init+0xae>
 8000c80:	4a86      	ldr	r2, [pc, #536]	; (8000e9c <HAL_GPIO_Init+0x288>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d01d      	beq.n	8000cc2 <HAL_GPIO_Init+0xae>
          break;
 8000c86:	e036      	b.n	8000cf6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c88:	4a85      	ldr	r2, [pc, #532]	; (8000ea0 <HAL_GPIO_Init+0x28c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d019      	beq.n	8000cc2 <HAL_GPIO_Init+0xae>
 8000c8e:	4a85      	ldr	r2, [pc, #532]	; (8000ea4 <HAL_GPIO_Init+0x290>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d016      	beq.n	8000cc2 <HAL_GPIO_Init+0xae>
 8000c94:	4a84      	ldr	r2, [pc, #528]	; (8000ea8 <HAL_GPIO_Init+0x294>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d013      	beq.n	8000cc2 <HAL_GPIO_Init+0xae>
          break;
 8000c9a:	e02c      	b.n	8000cf6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	623b      	str	r3, [r7, #32]
          break;
 8000ca2:	e028      	b.n	8000cf6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	623b      	str	r3, [r7, #32]
          break;
 8000cac:	e023      	b.n	8000cf6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	3308      	adds	r3, #8
 8000cb4:	623b      	str	r3, [r7, #32]
          break;
 8000cb6:	e01e      	b.n	8000cf6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	330c      	adds	r3, #12
 8000cbe:	623b      	str	r3, [r7, #32]
          break;
 8000cc0:	e019      	b.n	8000cf6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d102      	bne.n	8000cd0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cca:	2304      	movs	r3, #4
 8000ccc:	623b      	str	r3, [r7, #32]
          break;
 8000cce:	e012      	b.n	8000cf6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d105      	bne.n	8000ce4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	611a      	str	r2, [r3, #16]
          break;
 8000ce2:	e008      	b.n	8000cf6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ce4:	2308      	movs	r3, #8
 8000ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	69fa      	ldr	r2, [r7, #28]
 8000cec:	615a      	str	r2, [r3, #20]
          break;
 8000cee:	e002      	b.n	8000cf6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
          break;
 8000cf4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	2bff      	cmp	r3, #255	; 0xff
 8000cfa:	d801      	bhi.n	8000d00 <HAL_GPIO_Init+0xec>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	e001      	b.n	8000d04 <HAL_GPIO_Init+0xf0>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3304      	adds	r3, #4
 8000d04:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	2bff      	cmp	r3, #255	; 0xff
 8000d0a:	d802      	bhi.n	8000d12 <HAL_GPIO_Init+0xfe>
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	e002      	b.n	8000d18 <HAL_GPIO_Init+0x104>
 8000d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d14:	3b08      	subs	r3, #8
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	210f      	movs	r1, #15
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	fa01 f303 	lsl.w	r3, r1, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	401a      	ands	r2, r3
 8000d2a:	6a39      	ldr	r1, [r7, #32]
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	431a      	orrs	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f000 8096 	beq.w	8000e72 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d46:	4b59      	ldr	r3, [pc, #356]	; (8000eac <HAL_GPIO_Init+0x298>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	4a58      	ldr	r2, [pc, #352]	; (8000eac <HAL_GPIO_Init+0x298>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6193      	str	r3, [r2, #24]
 8000d52:	4b56      	ldr	r3, [pc, #344]	; (8000eac <HAL_GPIO_Init+0x298>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d5e:	4a54      	ldr	r2, [pc, #336]	; (8000eb0 <HAL_GPIO_Init+0x29c>)
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	3302      	adds	r3, #2
 8000d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	220f      	movs	r2, #15
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a4b      	ldr	r2, [pc, #300]	; (8000eb4 <HAL_GPIO_Init+0x2a0>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d013      	beq.n	8000db2 <HAL_GPIO_Init+0x19e>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4a      	ldr	r2, [pc, #296]	; (8000eb8 <HAL_GPIO_Init+0x2a4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d00d      	beq.n	8000dae <HAL_GPIO_Init+0x19a>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a49      	ldr	r2, [pc, #292]	; (8000ebc <HAL_GPIO_Init+0x2a8>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d007      	beq.n	8000daa <HAL_GPIO_Init+0x196>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a48      	ldr	r2, [pc, #288]	; (8000ec0 <HAL_GPIO_Init+0x2ac>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d101      	bne.n	8000da6 <HAL_GPIO_Init+0x192>
 8000da2:	2303      	movs	r3, #3
 8000da4:	e006      	b.n	8000db4 <HAL_GPIO_Init+0x1a0>
 8000da6:	2304      	movs	r3, #4
 8000da8:	e004      	b.n	8000db4 <HAL_GPIO_Init+0x1a0>
 8000daa:	2302      	movs	r3, #2
 8000dac:	e002      	b.n	8000db4 <HAL_GPIO_Init+0x1a0>
 8000dae:	2301      	movs	r3, #1
 8000db0:	e000      	b.n	8000db4 <HAL_GPIO_Init+0x1a0>
 8000db2:	2300      	movs	r3, #0
 8000db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000db6:	f002 0203 	and.w	r2, r2, #3
 8000dba:	0092      	lsls	r2, r2, #2
 8000dbc:	4093      	lsls	r3, r2
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dc4:	493a      	ldr	r1, [pc, #232]	; (8000eb0 <HAL_GPIO_Init+0x29c>)
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	089b      	lsrs	r3, r3, #2
 8000dca:	3302      	adds	r3, #2
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d006      	beq.n	8000dec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dde:	4b39      	ldr	r3, [pc, #228]	; (8000ec4 <HAL_GPIO_Init+0x2b0>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	4938      	ldr	r1, [pc, #224]	; (8000ec4 <HAL_GPIO_Init+0x2b0>)
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	600b      	str	r3, [r1, #0]
 8000dea:	e006      	b.n	8000dfa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dec:	4b35      	ldr	r3, [pc, #212]	; (8000ec4 <HAL_GPIO_Init+0x2b0>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	4933      	ldr	r1, [pc, #204]	; (8000ec4 <HAL_GPIO_Init+0x2b0>)
 8000df6:	4013      	ands	r3, r2
 8000df8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d006      	beq.n	8000e14 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e06:	4b2f      	ldr	r3, [pc, #188]	; (8000ec4 <HAL_GPIO_Init+0x2b0>)
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	492e      	ldr	r1, [pc, #184]	; (8000ec4 <HAL_GPIO_Init+0x2b0>)
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	604b      	str	r3, [r1, #4]
 8000e12:	e006      	b.n	8000e22 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e14:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <HAL_GPIO_Init+0x2b0>)
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	4929      	ldr	r1, [pc, #164]	; (8000ec4 <HAL_GPIO_Init+0x2b0>)
 8000e1e:	4013      	ands	r3, r2
 8000e20:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d006      	beq.n	8000e3c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e2e:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <HAL_GPIO_Init+0x2b0>)
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	4924      	ldr	r1, [pc, #144]	; (8000ec4 <HAL_GPIO_Init+0x2b0>)
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	608b      	str	r3, [r1, #8]
 8000e3a:	e006      	b.n	8000e4a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e3c:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <HAL_GPIO_Init+0x2b0>)
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	491f      	ldr	r1, [pc, #124]	; (8000ec4 <HAL_GPIO_Init+0x2b0>)
 8000e46:	4013      	ands	r3, r2
 8000e48:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d006      	beq.n	8000e64 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <HAL_GPIO_Init+0x2b0>)
 8000e58:	68da      	ldr	r2, [r3, #12]
 8000e5a:	491a      	ldr	r1, [pc, #104]	; (8000ec4 <HAL_GPIO_Init+0x2b0>)
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	60cb      	str	r3, [r1, #12]
 8000e62:	e006      	b.n	8000e72 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e64:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <HAL_GPIO_Init+0x2b0>)
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	4915      	ldr	r1, [pc, #84]	; (8000ec4 <HAL_GPIO_Init+0x2b0>)
 8000e6e:	4013      	ands	r3, r2
 8000e70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	3301      	adds	r3, #1
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f47f aed0 	bne.w	8000c28 <HAL_GPIO_Init+0x14>
  }
}
 8000e88:	bf00      	nop
 8000e8a:	372c      	adds	r7, #44	; 0x2c
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	10210000 	.word	0x10210000
 8000e98:	10110000 	.word	0x10110000
 8000e9c:	10120000 	.word	0x10120000
 8000ea0:	10310000 	.word	0x10310000
 8000ea4:	10320000 	.word	0x10320000
 8000ea8:	10220000 	.word	0x10220000
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40010000 	.word	0x40010000
 8000eb4:	40010800 	.word	0x40010800
 8000eb8:	40010c00 	.word	0x40010c00
 8000ebc:	40011000 	.word	0x40011000
 8000ec0:	40011400 	.word	0x40011400
 8000ec4:	40010400 	.word	0x40010400

08000ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	807b      	strh	r3, [r7, #2]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ed8:	787b      	ldrb	r3, [r7, #1]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ede:	887a      	ldrh	r2, [r7, #2]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ee4:	e003      	b.n	8000eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ee6:	887b      	ldrh	r3, [r7, #2]
 8000ee8:	041a      	lsls	r2, r3, #16
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	611a      	str	r2, [r3, #16]
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e26c      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 8087 	beq.w	8001026 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f18:	4b92      	ldr	r3, [pc, #584]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 030c 	and.w	r3, r3, #12
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d00c      	beq.n	8000f3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f24:	4b8f      	ldr	r3, [pc, #572]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 030c 	and.w	r3, r3, #12
 8000f2c:	2b08      	cmp	r3, #8
 8000f2e:	d112      	bne.n	8000f56 <HAL_RCC_OscConfig+0x5e>
 8000f30:	4b8c      	ldr	r3, [pc, #560]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f3c:	d10b      	bne.n	8000f56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3e:	4b89      	ldr	r3, [pc, #548]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d06c      	beq.n	8001024 <HAL_RCC_OscConfig+0x12c>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d168      	bne.n	8001024 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e246      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5e:	d106      	bne.n	8000f6e <HAL_RCC_OscConfig+0x76>
 8000f60:	4b80      	ldr	r3, [pc, #512]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a7f      	ldr	r2, [pc, #508]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	e02e      	b.n	8000fcc <HAL_RCC_OscConfig+0xd4>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10c      	bne.n	8000f90 <HAL_RCC_OscConfig+0x98>
 8000f76:	4b7b      	ldr	r3, [pc, #492]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a7a      	ldr	r2, [pc, #488]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	4b78      	ldr	r3, [pc, #480]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a77      	ldr	r2, [pc, #476]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	e01d      	b.n	8000fcc <HAL_RCC_OscConfig+0xd4>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f98:	d10c      	bne.n	8000fb4 <HAL_RCC_OscConfig+0xbc>
 8000f9a:	4b72      	ldr	r3, [pc, #456]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a71      	ldr	r2, [pc, #452]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	4b6f      	ldr	r3, [pc, #444]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a6e      	ldr	r2, [pc, #440]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e00b      	b.n	8000fcc <HAL_RCC_OscConfig+0xd4>
 8000fb4:	4b6b      	ldr	r3, [pc, #428]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a6a      	ldr	r2, [pc, #424]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4b68      	ldr	r3, [pc, #416]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a67      	ldr	r2, [pc, #412]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d013      	beq.n	8000ffc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fd30 	bl	8000a38 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fdc:	f7ff fd2c 	bl	8000a38 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b64      	cmp	r3, #100	; 0x64
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e1fa      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fee:	4b5d      	ldr	r3, [pc, #372]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0f0      	beq.n	8000fdc <HAL_RCC_OscConfig+0xe4>
 8000ffa:	e014      	b.n	8001026 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fd1c 	bl	8000a38 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001004:	f7ff fd18 	bl	8000a38 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b64      	cmp	r3, #100	; 0x64
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e1e6      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001016:	4b53      	ldr	r3, [pc, #332]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f0      	bne.n	8001004 <HAL_RCC_OscConfig+0x10c>
 8001022:	e000      	b.n	8001026 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d063      	beq.n	80010fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001032:	4b4c      	ldr	r3, [pc, #304]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00b      	beq.n	8001056 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800103e:	4b49      	ldr	r3, [pc, #292]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 030c 	and.w	r3, r3, #12
 8001046:	2b08      	cmp	r3, #8
 8001048:	d11c      	bne.n	8001084 <HAL_RCC_OscConfig+0x18c>
 800104a:	4b46      	ldr	r3, [pc, #280]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d116      	bne.n	8001084 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001056:	4b43      	ldr	r3, [pc, #268]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d005      	beq.n	800106e <HAL_RCC_OscConfig+0x176>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d001      	beq.n	800106e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e1ba      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106e:	4b3d      	ldr	r3, [pc, #244]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	4939      	ldr	r1, [pc, #228]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 800107e:	4313      	orrs	r3, r2
 8001080:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001082:	e03a      	b.n	80010fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d020      	beq.n	80010ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800108c:	4b36      	ldr	r3, [pc, #216]	; (8001168 <HAL_RCC_OscConfig+0x270>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001092:	f7ff fcd1 	bl	8000a38 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800109a:	f7ff fccd 	bl	8000a38 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e19b      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ac:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0f0      	beq.n	800109a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b8:	4b2a      	ldr	r3, [pc, #168]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	4927      	ldr	r1, [pc, #156]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	4313      	orrs	r3, r2
 80010ca:	600b      	str	r3, [r1, #0]
 80010cc:	e015      	b.n	80010fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <HAL_RCC_OscConfig+0x270>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d4:	f7ff fcb0 	bl	8000a38 <HAL_GetTick>
 80010d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010dc:	f7ff fcac 	bl	8000a38 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e17a      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f0      	bne.n	80010dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	2b00      	cmp	r3, #0
 8001104:	d03a      	beq.n	800117c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d019      	beq.n	8001142 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_RCC_OscConfig+0x274>)
 8001110:	2201      	movs	r2, #1
 8001112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001114:	f7ff fc90 	bl	8000a38 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800111c:	f7ff fc8c 	bl	8000a38 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e15a      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0f0      	beq.n	800111c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800113a:	2001      	movs	r0, #1
 800113c:	f000 faa8 	bl	8001690 <RCC_Delay>
 8001140:	e01c      	b.n	800117c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_RCC_OscConfig+0x274>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001148:	f7ff fc76 	bl	8000a38 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800114e:	e00f      	b.n	8001170 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001150:	f7ff fc72 	bl	8000a38 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d908      	bls.n	8001170 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e140      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000
 8001168:	42420000 	.word	0x42420000
 800116c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001170:	4b9e      	ldr	r3, [pc, #632]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1e9      	bne.n	8001150 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80a6 	beq.w	80012d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800118e:	4b97      	ldr	r3, [pc, #604]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10d      	bne.n	80011b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	4b94      	ldr	r3, [pc, #592]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	4a93      	ldr	r2, [pc, #588]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	61d3      	str	r3, [r2, #28]
 80011a6:	4b91      	ldr	r3, [pc, #580]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011b2:	2301      	movs	r3, #1
 80011b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b6:	4b8e      	ldr	r3, [pc, #568]	; (80013f0 <HAL_RCC_OscConfig+0x4f8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d118      	bne.n	80011f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011c2:	4b8b      	ldr	r3, [pc, #556]	; (80013f0 <HAL_RCC_OscConfig+0x4f8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a8a      	ldr	r2, [pc, #552]	; (80013f0 <HAL_RCC_OscConfig+0x4f8>)
 80011c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ce:	f7ff fc33 	bl	8000a38 <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d6:	f7ff fc2f 	bl	8000a38 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b64      	cmp	r3, #100	; 0x64
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e0fd      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e8:	4b81      	ldr	r3, [pc, #516]	; (80013f0 <HAL_RCC_OscConfig+0x4f8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0f0      	beq.n	80011d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d106      	bne.n	800120a <HAL_RCC_OscConfig+0x312>
 80011fc:	4b7b      	ldr	r3, [pc, #492]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	4a7a      	ldr	r2, [pc, #488]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6213      	str	r3, [r2, #32]
 8001208:	e02d      	b.n	8001266 <HAL_RCC_OscConfig+0x36e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10c      	bne.n	800122c <HAL_RCC_OscConfig+0x334>
 8001212:	4b76      	ldr	r3, [pc, #472]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	4a75      	ldr	r2, [pc, #468]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001218:	f023 0301 	bic.w	r3, r3, #1
 800121c:	6213      	str	r3, [r2, #32]
 800121e:	4b73      	ldr	r3, [pc, #460]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	4a72      	ldr	r2, [pc, #456]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001224:	f023 0304 	bic.w	r3, r3, #4
 8001228:	6213      	str	r3, [r2, #32]
 800122a:	e01c      	b.n	8001266 <HAL_RCC_OscConfig+0x36e>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	2b05      	cmp	r3, #5
 8001232:	d10c      	bne.n	800124e <HAL_RCC_OscConfig+0x356>
 8001234:	4b6d      	ldr	r3, [pc, #436]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	4a6c      	ldr	r2, [pc, #432]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 800123a:	f043 0304 	orr.w	r3, r3, #4
 800123e:	6213      	str	r3, [r2, #32]
 8001240:	4b6a      	ldr	r3, [pc, #424]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	4a69      	ldr	r2, [pc, #420]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6213      	str	r3, [r2, #32]
 800124c:	e00b      	b.n	8001266 <HAL_RCC_OscConfig+0x36e>
 800124e:	4b67      	ldr	r3, [pc, #412]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	4a66      	ldr	r2, [pc, #408]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001254:	f023 0301 	bic.w	r3, r3, #1
 8001258:	6213      	str	r3, [r2, #32]
 800125a:	4b64      	ldr	r3, [pc, #400]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	4a63      	ldr	r2, [pc, #396]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001260:	f023 0304 	bic.w	r3, r3, #4
 8001264:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d015      	beq.n	800129a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126e:	f7ff fbe3 	bl	8000a38 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001274:	e00a      	b.n	800128c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001276:	f7ff fbdf 	bl	8000a38 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	f241 3288 	movw	r2, #5000	; 0x1388
 8001284:	4293      	cmp	r3, r2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e0ab      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128c:	4b57      	ldr	r3, [pc, #348]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0ee      	beq.n	8001276 <HAL_RCC_OscConfig+0x37e>
 8001298:	e014      	b.n	80012c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129a:	f7ff fbcd 	bl	8000a38 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a0:	e00a      	b.n	80012b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a2:	f7ff fbc9 	bl	8000a38 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e095      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b8:	4b4c      	ldr	r3, [pc, #304]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1ee      	bne.n	80012a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d105      	bne.n	80012d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ca:	4b48      	ldr	r3, [pc, #288]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a47      	ldr	r2, [pc, #284]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 80012d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 8081 	beq.w	80013e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012e0:	4b42      	ldr	r3, [pc, #264]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 030c 	and.w	r3, r3, #12
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	d061      	beq.n	80013b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d146      	bne.n	8001382 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f4:	4b3f      	ldr	r3, [pc, #252]	; (80013f4 <HAL_RCC_OscConfig+0x4fc>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fa:	f7ff fb9d 	bl	8000a38 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001302:	f7ff fb99 	bl	8000a38 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e067      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001314:	4b35      	ldr	r3, [pc, #212]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1f0      	bne.n	8001302 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001328:	d108      	bne.n	800133c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800132a:	4b30      	ldr	r3, [pc, #192]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	492d      	ldr	r1, [pc, #180]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001338:	4313      	orrs	r3, r2
 800133a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800133c:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a19      	ldr	r1, [r3, #32]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	430b      	orrs	r3, r1
 800134e:	4927      	ldr	r1, [pc, #156]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001350:	4313      	orrs	r3, r2
 8001352:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <HAL_RCC_OscConfig+0x4fc>)
 8001356:	2201      	movs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135a:	f7ff fb6d 	bl	8000a38 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001362:	f7ff fb69 	bl	8000a38 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e037      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x46a>
 8001380:	e02f      	b.n	80013e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <HAL_RCC_OscConfig+0x4fc>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fb56 	bl	8000a38 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001390:	f7ff fb52 	bl	8000a38 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e020      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x498>
 80013ae:	e018      	b.n	80013e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e013      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d106      	bne.n	80013de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013da:	429a      	cmp	r2, r3
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40007000 	.word	0x40007000
 80013f4:	42420060 	.word	0x42420060

080013f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0d0      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800140c:	4b6a      	ldr	r3, [pc, #424]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d910      	bls.n	800143c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141a:	4b67      	ldr	r3, [pc, #412]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 0207 	bic.w	r2, r3, #7
 8001422:	4965      	ldr	r1, [pc, #404]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800142a:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	429a      	cmp	r2, r3
 8001436:	d001      	beq.n	800143c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e0b8      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d020      	beq.n	800148a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001454:	4b59      	ldr	r3, [pc, #356]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4a58      	ldr	r2, [pc, #352]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 800145a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800145e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0308 	and.w	r3, r3, #8
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800146c:	4b53      	ldr	r3, [pc, #332]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4a52      	ldr	r2, [pc, #328]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001476:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001478:	4b50      	ldr	r3, [pc, #320]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	494d      	ldr	r1, [pc, #308]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001486:	4313      	orrs	r3, r2
 8001488:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d040      	beq.n	8001518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d107      	bne.n	80014ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149e:	4b47      	ldr	r3, [pc, #284]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d115      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e07f      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d107      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b6:	4b41      	ldr	r3, [pc, #260]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d109      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e073      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c6:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e06b      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014d6:	4b39      	ldr	r3, [pc, #228]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f023 0203 	bic.w	r2, r3, #3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4936      	ldr	r1, [pc, #216]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014e8:	f7ff faa6 	bl	8000a38 <HAL_GetTick>
 80014ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ee:	e00a      	b.n	8001506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f0:	f7ff faa2 	bl	8000a38 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fe:	4293      	cmp	r3, r2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e053      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001506:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 020c 	and.w	r2, r3, #12
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	429a      	cmp	r2, r3
 8001516:	d1eb      	bne.n	80014f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001518:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d210      	bcs.n	8001548 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 0207 	bic.w	r2, r3, #7
 800152e:	4922      	ldr	r1, [pc, #136]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d001      	beq.n	8001548 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e032      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d008      	beq.n	8001566 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	4916      	ldr	r1, [pc, #88]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	4313      	orrs	r3, r2
 8001564:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d009      	beq.n	8001586 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	490e      	ldr	r1, [pc, #56]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001586:	f000 f821 	bl	80015cc <HAL_RCC_GetSysClockFreq>
 800158a:	4601      	mov	r1, r0
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001598:	5cd3      	ldrb	r3, [r2, r3]
 800159a:	fa21 f303 	lsr.w	r3, r1, r3
 800159e:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <HAL_RCC_ClockConfig+0x1cc>)
 80015a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_RCC_ClockConfig+0x1d0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fa04 	bl	80009b4 <HAL_InitTick>

  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40022000 	.word	0x40022000
 80015bc:	40021000 	.word	0x40021000
 80015c0:	08001d90 	.word	0x08001d90
 80015c4:	20000000 	.word	0x20000000
 80015c8:	20000004 	.word	0x20000004

080015cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015cc:	b490      	push	{r4, r7}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015d2:	4b2a      	ldr	r3, [pc, #168]	; (800167c <HAL_RCC_GetSysClockFreq+0xb0>)
 80015d4:	1d3c      	adds	r4, r7, #4
 80015d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015dc:	4b28      	ldr	r3, [pc, #160]	; (8001680 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015f6:	4b23      	ldr	r3, [pc, #140]	; (8001684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	2b04      	cmp	r3, #4
 8001604:	d002      	beq.n	800160c <HAL_RCC_GetSysClockFreq+0x40>
 8001606:	2b08      	cmp	r3, #8
 8001608:	d003      	beq.n	8001612 <HAL_RCC_GetSysClockFreq+0x46>
 800160a:	e02d      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800160e:	623b      	str	r3, [r7, #32]
      break;
 8001610:	e02d      	b.n	800166e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	0c9b      	lsrs	r3, r3, #18
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800161e:	4413      	add	r3, r2
 8001620:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001624:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d013      	beq.n	8001658 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	0c5b      	lsrs	r3, r3, #17
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800163e:	4413      	add	r3, r2
 8001640:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001644:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	4a0f      	ldr	r2, [pc, #60]	; (8001688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800164a:	fb02 f203 	mul.w	r2, r2, r3
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	fbb2 f3f3 	udiv	r3, r2, r3
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
 8001656:	e004      	b.n	8001662 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	4a0c      	ldr	r2, [pc, #48]	; (800168c <HAL_RCC_GetSysClockFreq+0xc0>)
 800165c:	fb02 f303 	mul.w	r3, r2, r3
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	623b      	str	r3, [r7, #32]
      break;
 8001666:	e002      	b.n	800166e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800166a:	623b      	str	r3, [r7, #32]
      break;
 800166c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800166e:	6a3b      	ldr	r3, [r7, #32]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3728      	adds	r7, #40	; 0x28
 8001674:	46bd      	mov	sp, r7
 8001676:	bc90      	pop	{r4, r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	08001d7c 	.word	0x08001d7c
 8001680:	08001d8c 	.word	0x08001d8c
 8001684:	40021000 	.word	0x40021000
 8001688:	007a1200 	.word	0x007a1200
 800168c:	003d0900 	.word	0x003d0900

08001690 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <RCC_Delay+0x34>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <RCC_Delay+0x38>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	0a5b      	lsrs	r3, r3, #9
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	fb02 f303 	mul.w	r3, r2, r3
 80016aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016ac:	bf00      	nop
  }
  while (Delay --);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1e5a      	subs	r2, r3, #1
 80016b2:	60fa      	str	r2, [r7, #12]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f9      	bne.n	80016ac <RCC_Delay+0x1c>
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000000 	.word	0x20000000
 80016c8:	10624dd3 	.word	0x10624dd3

080016cc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80016cc:	b490      	push	{r4, r7}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	461a      	mov	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	0e1b      	lsrs	r3, r3, #24
 80016e0:	4413      	add	r3, r2
 80016e2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80016e4:	6822      	ldr	r2, [r4, #0]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	fab3 f383 	clz	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	210f      	movs	r1, #15
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	401a      	ands	r2, r3
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	fa93 f3a3 	rbit	r3, r3
 8001710:	61bb      	str	r3, [r7, #24]
  return result;
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	fab3 f383 	clz	r3, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	4313      	orrs	r3, r2
 8001724:	6023      	str	r3, [r4, #0]
}
 8001726:	bf00      	nop
 8001728:	3720      	adds	r7, #32
 800172a:	46bd      	mov	sp, r7
 800172c:	bc90      	pop	{r4, r7}
 800172e:	4770      	bx	lr

08001730 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001730:	b490      	push	{r4, r7}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	461a      	mov	r2, r3
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	0e1b      	lsrs	r3, r3, #24
 8001744:	4413      	add	r3, r2
 8001746:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001748:	6822      	ldr	r2, [r4, #0]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	613b      	str	r3, [r7, #16]
  return result;
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	fab3 f383 	clz	r3, r3
 800175c:	b2db      	uxtb	r3, r3
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	2103      	movs	r1, #3
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	401a      	ands	r2, r3
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa93 f3a3 	rbit	r3, r3
 8001774:	61bb      	str	r3, [r7, #24]
  return result;
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	fab3 f383 	clz	r3, r3
 800177c:	b2db      	uxtb	r3, r3
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	4313      	orrs	r3, r2
 8001788:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 800178a:	bf00      	nop
 800178c:	3720      	adds	r7, #32
 800178e:	46bd      	mov	sp, r7
 8001790:	bc90      	pop	{r4, r7}
 8001792:	4770      	bx	lr

08001794 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8001794:	b490      	push	{r4, r7}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	461a      	mov	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	0e1b      	lsrs	r3, r3, #24
 80017a8:	4413      	add	r3, r2
 80017aa:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80017ac:	6822      	ldr	r2, [r4, #0]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	fa93 f3a3 	rbit	r3, r3
 80017b8:	613b      	str	r3, [r7, #16]
  return result;
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	fab3 f383 	clz	r3, r3
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	2104      	movs	r1, #4
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	401a      	ands	r2, r3
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa93 f3a3 	rbit	r3, r3
 80017d8:	61bb      	str	r3, [r7, #24]
  return result;
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	fab3 f383 	clz	r3, r3
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	4313      	orrs	r3, r2
 80017ec:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 80017ee:	bf00      	nop
 80017f0:	3720      	adds	r7, #32
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc90      	pop	{r4, r7}
 80017f6:	4770      	bx	lr

080017f8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	0a1b      	lsrs	r3, r3, #8
 800180c:	43db      	mvns	r3, r3
 800180e:	401a      	ands	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	0a1b      	lsrs	r3, r3, #8
 8001814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	fa93 f3a3 	rbit	r3, r3
 800181c:	613b      	str	r3, [r7, #16]
  return result;
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	fab3 f383 	clz	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	4619      	mov	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	408b      	lsls	r3, r1
 800182c:	431a      	orrs	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	60da      	str	r2, [r3, #12]
}
 8001832:	bf00      	nop
 8001834:	371c      	adds	r7, #28
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	0c1b      	lsrs	r3, r3, #16
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	fa93 f3a3 	rbit	r3, r3
 800185a:	60fb      	str	r3, [r7, #12]
  return result;
 800185c:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 800185e:	fab3 f383 	clz	r3, r3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8001866:	e040      	b.n	80018ea <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8001868:	2201      	movs	r2, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	409a      	lsls	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	4013      	ands	r3, r2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d036      	beq.n	80018e4 <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	2b07      	cmp	r3, #7
 800187a:	d806      	bhi.n	800188a <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800187c:	f240 1201 	movw	r2, #257	; 0x101
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	e008      	b.n	800189c <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3b08      	subs	r3, #8
 800188e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800189a:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	461a      	mov	r2, r3
 80018a2:	69b9      	ldr	r1, [r7, #24]
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ff11 	bl	80016cc <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	461a      	mov	r2, r3
 80018b0:	69b9      	ldr	r1, [r7, #24]
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ffa0 	bl	80017f8 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d003      	beq.n	80018c8 <LL_GPIO_Init+0x8c>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b09      	cmp	r3, #9
 80018c6:	d10d      	bne.n	80018e4 <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	461a      	mov	r2, r3
 80018ce:	69b9      	ldr	r1, [r7, #24]
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff2d 	bl	8001730 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	461a      	mov	r2, r3
 80018dc:	69b9      	ldr	r1, [r7, #24]
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ff58 	bl	8001794 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	3301      	adds	r3, #1
 80018e8:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	fa22 f303 	lsr.w	r3, r2, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1b8      	bne.n	8001868 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <LL_RCC_GetSysClkSource+0x14>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 030c 	and.w	r3, r3, #12
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	40021000 	.word	0x40021000

08001918 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <LL_RCC_GetAHBPrescaler+0x14>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	40021000 	.word	0x40021000

08001930 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	40021000 	.word	0x40021000

08001948 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <LL_RCC_GetAPB2Prescaler+0x14>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	40021000 	.word	0x40021000

08001960 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <LL_RCC_PLL_GetMainSource+0x14>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	40021000 	.word	0x40021000

08001978 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 800197c:	4b03      	ldr	r3, [pc, #12]	; (800198c <LL_RCC_PLL_GetMultiplicator+0x14>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	40021000 	.word	0x40021000

08001990 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <LL_RCC_PLL_GetPrediv+0x18>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	0c5b      	lsrs	r3, r3, #17
 800199a:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000

080019ac <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80019b4:	f000 f820 	bl	80019f8 <RCC_GetSystemClockFreq>
 80019b8:	4602      	mov	r2, r0
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f83a 	bl	8001a3c <RCC_GetHCLKClockFreq>
 80019c8:	4602      	mov	r2, r0
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f848 	bl	8001a68 <RCC_GetPCLK1ClockFreq>
 80019d8:	4602      	mov	r2, r0
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f854 	bl	8001a90 <RCC_GetPCLK2ClockFreq>
 80019e8:	4602      	mov	r2, r0
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	60da      	str	r2, [r3, #12]
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001a02:	f7ff ff7d 	bl	8001900 <LL_RCC_GetSysClkSource>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d006      	beq.n	8001a1a <RCC_GetSystemClockFreq+0x22>
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d007      	beq.n	8001a20 <RCC_GetSystemClockFreq+0x28>
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d109      	bne.n	8001a28 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <RCC_GetSystemClockFreq+0x40>)
 8001a16:	607b      	str	r3, [r7, #4]
      break;
 8001a18:	e009      	b.n	8001a2e <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <RCC_GetSystemClockFreq+0x40>)
 8001a1c:	607b      	str	r3, [r7, #4]
      break;
 8001a1e:	e006      	b.n	8001a2e <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001a20:	f000 f84a 	bl	8001ab8 <RCC_PLL_GetFreqDomain_SYS>
 8001a24:	6078      	str	r0, [r7, #4]
      break;
 8001a26:	e002      	b.n	8001a2e <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8001a28:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <RCC_GetSystemClockFreq+0x40>)
 8001a2a:	607b      	str	r3, [r7, #4]
      break;
 8001a2c:	bf00      	nop
  }

  return frequency;
 8001a2e:	687b      	ldr	r3, [r7, #4]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	007a1200 	.word	0x007a1200

08001a3c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001a44:	f7ff ff68 	bl	8001918 <LL_RCC_GetAHBPrescaler>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	f003 030f 	and.w	r3, r3, #15
 8001a50:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <RCC_GetHCLKClockFreq+0x28>)
 8001a52:	5cd3      	ldrb	r3, [r2, r3]
 8001a54:	461a      	mov	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	40d3      	lsrs	r3, r2
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	08001d90 	.word	0x08001d90

08001a68 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001a70:	f7ff ff5e 	bl	8001930 <LL_RCC_GetAPB1Prescaler>
 8001a74:	4603      	mov	r3, r0
 8001a76:	0a1b      	lsrs	r3, r3, #8
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <RCC_GetPCLK1ClockFreq+0x24>)
 8001a7a:	5cd3      	ldrb	r3, [r2, r3]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	40d3      	lsrs	r3, r2
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	08001da0 	.word	0x08001da0

08001a90 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001a98:	f7ff ff56 	bl	8001948 <LL_RCC_GetAPB2Prescaler>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	0adb      	lsrs	r3, r3, #11
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <RCC_GetPCLK2ClockFreq+0x24>)
 8001aa2:	5cd3      	ldrb	r3, [r2, r3]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	40d3      	lsrs	r3, r2
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	08001da0 	.word	0x08001da0

08001ab8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001ac6:	f7ff ff4b 	bl	8001960 <LL_RCC_PLL_GetMainSource>
 8001aca:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad6:	d003      	beq.n	8001ae0 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001ad8:	e00b      	b.n	8001af2 <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8001adc:	607b      	str	r3, [r7, #4]
      break;
 8001ade:	e00b      	b.n	8001af8 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8001ae0:	f7ff ff56 	bl	8001990 <LL_RCC_PLL_GetPrediv>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aee:	607b      	str	r3, [r7, #4]
      break;
 8001af0:	e002      	b.n	8001af8 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8001af4:	607b      	str	r3, [r7, #4]
      break;
 8001af6:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8001af8:	f7ff ff3e 	bl	8001978 <LL_RCC_PLL_GetMultiplicator>
 8001afc:	4603      	mov	r3, r0
 8001afe:	0c9b      	lsrs	r3, r3, #18
 8001b00:	3302      	adds	r3, #2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	fb02 f303 	mul.w	r3, r2, r3
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	003d0900 	.word	0x003d0900
 8001b14:	007a1200 	.word	0x007a1200

08001b18 <LL_USART_IsEnabled>:
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b2c:	bf0c      	ite	eq
 8001b2e:	2301      	moveq	r3, #1
 8001b30:	2300      	movne	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <LL_USART_SetStopBitsLength>:
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	611a      	str	r2, [r3, #16]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr

08001b62 <LL_USART_SetHWFlowCtrl>:
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	615a      	str	r2, [r3, #20]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
	...

08001b88 <LL_USART_SetBaudRate>:
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009a      	lsls	r2, r3, #2
 8001b9e:	441a      	add	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba8:	4a25      	ldr	r2, [pc, #148]	; (8001c40 <LL_USART_SetBaudRate+0xb8>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	b299      	uxth	r1, r3
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	009a      	lsls	r2, r3, #2
 8001bc0:	441a      	add	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bca:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <LL_USART_SetBaudRate+0xb8>)
 8001bcc:	fba3 0302 	umull	r0, r3, r3, r2
 8001bd0:	095b      	lsrs	r3, r3, #5
 8001bd2:	2064      	movs	r0, #100	; 0x64
 8001bd4:	fb00 f303 	mul.w	r3, r0, r3
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	3332      	adds	r3, #50	; 0x32
 8001bde:	4a18      	ldr	r2, [pc, #96]	; (8001c40 <LL_USART_SetBaudRate+0xb8>)
 8001be0:	fba2 2303 	umull	r2, r3, r2, r3
 8001be4:	095b      	lsrs	r3, r3, #5
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	440b      	add	r3, r1
 8001bf0:	b299      	uxth	r1, r3
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009a      	lsls	r2, r3, #2
 8001bfc:	441a      	add	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <LL_USART_SetBaudRate+0xb8>)
 8001c08:	fba3 0302 	umull	r0, r3, r3, r2
 8001c0c:	095b      	lsrs	r3, r3, #5
 8001c0e:	2064      	movs	r0, #100	; 0x64
 8001c10:	fb00 f303 	mul.w	r3, r0, r3
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	011b      	lsls	r3, r3, #4
 8001c18:	3332      	adds	r3, #50	; 0x32
 8001c1a:	4a09      	ldr	r2, [pc, #36]	; (8001c40 <LL_USART_SetBaudRate+0xb8>)
 8001c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c20:	095b      	lsrs	r3, r3, #5
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	440b      	add	r3, r1
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	609a      	str	r2, [r3, #8]
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	51eb851f 	.word	0x51eb851f

08001c44 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ff5e 	bl	8001b18 <LL_USART_IsEnabled>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d145      	bne.n	8001cee <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c6a:	f023 030c 	bic.w	r3, r3, #12
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	6851      	ldr	r1, [r2, #4]
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	68d2      	ldr	r2, [r2, #12]
 8001c76:	4311      	orrs	r1, r2
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	6912      	ldr	r2, [r2, #16]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff ff57 	bl	8001b3e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	4619      	mov	r1, r3
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff ff63 	bl	8001b62 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001c9c:	f107 0308 	add.w	r3, r7, #8
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fe83 	bl	80019ac <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <LL_USART_Init+0xb4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d102      	bne.n	8001cb4 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	e00c      	b.n	8001cce <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a11      	ldr	r2, [pc, #68]	; (8001cfc <LL_USART_Init+0xb8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d102      	bne.n	8001cc2 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	61bb      	str	r3, [r7, #24]
 8001cc0:	e005      	b.n	8001cce <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a0e      	ldr	r2, [pc, #56]	; (8001d00 <LL_USART_Init+0xbc>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d101      	bne.n	8001cce <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00c      	beq.n	8001cee <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	69b9      	ldr	r1, [r7, #24]
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ff4d 	bl	8001b88 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001cee:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3720      	adds	r7, #32
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40013800 	.word	0x40013800
 8001cfc:	40004400 	.word	0x40004400
 8001d00:	40004800 	.word	0x40004800

08001d04 <__libc_init_array>:
 8001d04:	b570      	push	{r4, r5, r6, lr}
 8001d06:	2500      	movs	r5, #0
 8001d08:	4e0c      	ldr	r6, [pc, #48]	; (8001d3c <__libc_init_array+0x38>)
 8001d0a:	4c0d      	ldr	r4, [pc, #52]	; (8001d40 <__libc_init_array+0x3c>)
 8001d0c:	1ba4      	subs	r4, r4, r6
 8001d0e:	10a4      	asrs	r4, r4, #2
 8001d10:	42a5      	cmp	r5, r4
 8001d12:	d109      	bne.n	8001d28 <__libc_init_array+0x24>
 8001d14:	f000 f822 	bl	8001d5c <_init>
 8001d18:	2500      	movs	r5, #0
 8001d1a:	4e0a      	ldr	r6, [pc, #40]	; (8001d44 <__libc_init_array+0x40>)
 8001d1c:	4c0a      	ldr	r4, [pc, #40]	; (8001d48 <__libc_init_array+0x44>)
 8001d1e:	1ba4      	subs	r4, r4, r6
 8001d20:	10a4      	asrs	r4, r4, #2
 8001d22:	42a5      	cmp	r5, r4
 8001d24:	d105      	bne.n	8001d32 <__libc_init_array+0x2e>
 8001d26:	bd70      	pop	{r4, r5, r6, pc}
 8001d28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d2c:	4798      	blx	r3
 8001d2e:	3501      	adds	r5, #1
 8001d30:	e7ee      	b.n	8001d10 <__libc_init_array+0xc>
 8001d32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d36:	4798      	blx	r3
 8001d38:	3501      	adds	r5, #1
 8001d3a:	e7f2      	b.n	8001d22 <__libc_init_array+0x1e>
 8001d3c:	08001da8 	.word	0x08001da8
 8001d40:	08001da8 	.word	0x08001da8
 8001d44:	08001da8 	.word	0x08001da8
 8001d48:	08001dac 	.word	0x08001dac

08001d4c <memset>:
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	4402      	add	r2, r0
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d100      	bne.n	8001d56 <memset+0xa>
 8001d54:	4770      	bx	lr
 8001d56:	f803 1b01 	strb.w	r1, [r3], #1
 8001d5a:	e7f9      	b.n	8001d50 <memset+0x4>

08001d5c <_init>:
 8001d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5e:	bf00      	nop
 8001d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d62:	bc08      	pop	{r3}
 8001d64:	469e      	mov	lr, r3
 8001d66:	4770      	bx	lr

08001d68 <_fini>:
 8001d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6a:	bf00      	nop
 8001d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d6e:	bc08      	pop	{r3}
 8001d70:	469e      	mov	lr, r3
 8001d72:	4770      	bx	lr
