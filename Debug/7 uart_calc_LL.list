
7 uart_calc_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002628  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002734  08002734  00012734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027ac  080027ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080027ac  080027ac  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027ac  080027ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027ac  080027ac  000127ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080027b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000070  08002824  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08002824  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006873  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000191a  00000000  00000000  0002690c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000690  00000000  00000000  00028228  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005b8  00000000  00000000  000288b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015ecc  00000000  00000000  00028e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006732  00000000  00000000  0003ed3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f6f5  00000000  00000000  0004546e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b4b63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b8c  00000000  00000000  000b4be0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800271c 	.word	0x0800271c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800271c 	.word	0x0800271c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <fifo_write_byte>:
int write_index;
int read_index;
uint8_t unread_count;

int fifo_write_byte(uint8_t byte)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]

    int ret = -1;  //init return with error
 8000166:	f04f 33ff 	mov.w	r3, #4294967295
 800016a:	60fb      	str	r3, [r7, #12]
    //if no space in fifo, return error
    if(fifo_data_available() >= FIFO_SIZE)
 800016c:	f000 f85c 	bl	8000228 <fifo_data_available>
 8000170:	4603      	mov	r3, r0
 8000172:	2b63      	cmp	r3, #99	; 0x63
 8000174:	dd01      	ble.n	800017a <fifo_write_byte+0x1e>
    {
        return ret;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	e019      	b.n	80001ae <fifo_write_byte+0x52>
    }
    //write data to fifo
    buff[write_index] = byte;
 800017a:	4b0f      	ldr	r3, [pc, #60]	; (80001b8 <fifo_write_byte+0x5c>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	490f      	ldr	r1, [pc, #60]	; (80001bc <fifo_write_byte+0x60>)
 8000180:	79fa      	ldrb	r2, [r7, #7]
 8000182:	54ca      	strb	r2, [r1, r3]

    //increment unread count
    unread_count++;
 8000184:	4b0e      	ldr	r3, [pc, #56]	; (80001c0 <fifo_write_byte+0x64>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	3301      	adds	r3, #1
 800018a:	b2da      	uxtb	r2, r3
 800018c:	4b0c      	ldr	r3, [pc, #48]	; (80001c0 <fifo_write_byte+0x64>)
 800018e:	701a      	strb	r2, [r3, #0]

    //increament write index and check if it is overflowing, if so make it zero
    write_index++;
 8000190:	4b09      	ldr	r3, [pc, #36]	; (80001b8 <fifo_write_byte+0x5c>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	3301      	adds	r3, #1
 8000196:	4a08      	ldr	r2, [pc, #32]	; (80001b8 <fifo_write_byte+0x5c>)
 8000198:	6013      	str	r3, [r2, #0]
    if(write_index >= FIFO_SIZE)
 800019a:	4b07      	ldr	r3, [pc, #28]	; (80001b8 <fifo_write_byte+0x5c>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	2b63      	cmp	r3, #99	; 0x63
 80001a0:	dd02      	ble.n	80001a8 <fifo_write_byte+0x4c>
    {
        write_index = 0;
 80001a2:	4b05      	ldr	r3, [pc, #20]	; (80001b8 <fifo_write_byte+0x5c>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
    }

    ret = 0;
 80001a8:	2300      	movs	r3, #0
 80001aa:	60fb      	str	r3, [r7, #12]
    return ret;
 80001ac:	68fb      	ldr	r3, [r7, #12]

}
 80001ae:	4618      	mov	r0, r3
 80001b0:	3710      	adds	r7, #16
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	20000098 	.word	0x20000098
 80001bc:	200000a0 	.word	0x200000a0
 80001c0:	20000104 	.word	0x20000104

080001c4 <fifo_read_byte>:

int fifo_read_byte(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0

	uint8_t byte;

    int ret = -1;  //return -1 if no data to read. If not, copy the uint8_t byte to int variable and return.
 80001ca:	f04f 33ff 	mov.w	r3, #4294967295
 80001ce:	607b      	str	r3, [r7, #4]
                    //so that if the return is not -1, then consider it as a valid data byte,(0 to 0xff),
    if(unread_count == 0)
 80001d0:	4b12      	ldr	r3, [pc, #72]	; (800021c <fifo_read_byte+0x58>)
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d101      	bne.n	80001dc <fifo_read_byte+0x18>
    {
        return ret;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	e019      	b.n	8000210 <fifo_read_byte+0x4c>
    }

    byte = buff[read_index];
 80001dc:	4b10      	ldr	r3, [pc, #64]	; (8000220 <fifo_read_byte+0x5c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a10      	ldr	r2, [pc, #64]	; (8000224 <fifo_read_byte+0x60>)
 80001e2:	5cd3      	ldrb	r3, [r2, r3]
 80001e4:	70fb      	strb	r3, [r7, #3]

    read_index++;
 80001e6:	4b0e      	ldr	r3, [pc, #56]	; (8000220 <fifo_read_byte+0x5c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	3301      	adds	r3, #1
 80001ec:	4a0c      	ldr	r2, [pc, #48]	; (8000220 <fifo_read_byte+0x5c>)
 80001ee:	6013      	str	r3, [r2, #0]
    unread_count--;
 80001f0:	4b0a      	ldr	r3, [pc, #40]	; (800021c <fifo_read_byte+0x58>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	3b01      	subs	r3, #1
 80001f6:	b2da      	uxtb	r2, r3
 80001f8:	4b08      	ldr	r3, [pc, #32]	; (800021c <fifo_read_byte+0x58>)
 80001fa:	701a      	strb	r2, [r3, #0]

    if(read_index >= FIFO_SIZE)
 80001fc:	4b08      	ldr	r3, [pc, #32]	; (8000220 <fifo_read_byte+0x5c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	2b63      	cmp	r3, #99	; 0x63
 8000202:	dd02      	ble.n	800020a <fifo_read_byte+0x46>
    {
        read_index = 0;
 8000204:	4b06      	ldr	r3, [pc, #24]	; (8000220 <fifo_read_byte+0x5c>)
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
    }

    ret = (int)(byte);
 800020a:	78fb      	ldrb	r3, [r7, #3]
 800020c:	607b      	str	r3, [r7, #4]
  //  uprintf(ret);
    return ret;
 800020e:	687b      	ldr	r3, [r7, #4]

}
 8000210:	4618      	mov	r0, r3
 8000212:	370c      	adds	r7, #12
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	20000104 	.word	0x20000104
 8000220:	2000009c 	.word	0x2000009c
 8000224:	200000a0 	.word	0x200000a0

08000228 <fifo_data_available>:

int fifo_data_available(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
    return unread_count;
 800022c:	4b02      	ldr	r3, [pc, #8]	; (8000238 <fifo_data_available+0x10>)
 800022e:	781b      	ldrb	r3, [r3, #0]
}
 8000230:	4618      	mov	r0, r3
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	20000104 	.word	0x20000104

0800023c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__NVIC_GetPriorityGrouping+0x18>)
 8000242:	68db      	ldr	r3, [r3, #12]
 8000244:	0a1b      	lsrs	r3, r3, #8
 8000246:	f003 0307 	and.w	r3, r3, #7
}
 800024a:	4618      	mov	r0, r3
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000266:	2b00      	cmp	r3, #0
 8000268:	db0b      	blt.n	8000282 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	f003 021f 	and.w	r2, r3, #31
 8000270:	4906      	ldr	r1, [pc, #24]	; (800028c <__NVIC_EnableIRQ+0x34>)
 8000272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000276:	095b      	lsrs	r3, r3, #5
 8000278:	2001      	movs	r0, #1
 800027a:	fa00 f202 	lsl.w	r2, r0, r2
 800027e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr
 800028c:	e000e100 	.word	0xe000e100

08000290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	6039      	str	r1, [r7, #0]
 800029a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	db0a      	blt.n	80002ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	490c      	ldr	r1, [pc, #48]	; (80002dc <__NVIC_SetPriority+0x4c>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	0112      	lsls	r2, r2, #4
 80002b0:	b2d2      	uxtb	r2, r2
 80002b2:	440b      	add	r3, r1
 80002b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002b8:	e00a      	b.n	80002d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	4908      	ldr	r1, [pc, #32]	; (80002e0 <__NVIC_SetPriority+0x50>)
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	f003 030f 	and.w	r3, r3, #15
 80002c6:	3b04      	subs	r3, #4
 80002c8:	0112      	lsls	r2, r2, #4
 80002ca:	b2d2      	uxtb	r2, r2
 80002cc:	440b      	add	r3, r1
 80002ce:	761a      	strb	r2, [r3, #24]
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	e000e100 	.word	0xe000e100
 80002e0:	e000ed00 	.word	0xe000ed00

080002e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b089      	sub	sp, #36	; 0x24
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	60b9      	str	r1, [r7, #8]
 80002ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	f003 0307 	and.w	r3, r3, #7
 80002f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002f8:	69fb      	ldr	r3, [r7, #28]
 80002fa:	f1c3 0307 	rsb	r3, r3, #7
 80002fe:	2b04      	cmp	r3, #4
 8000300:	bf28      	it	cs
 8000302:	2304      	movcs	r3, #4
 8000304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000306:	69fb      	ldr	r3, [r7, #28]
 8000308:	3304      	adds	r3, #4
 800030a:	2b06      	cmp	r3, #6
 800030c:	d902      	bls.n	8000314 <NVIC_EncodePriority+0x30>
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	3b03      	subs	r3, #3
 8000312:	e000      	b.n	8000316 <NVIC_EncodePriority+0x32>
 8000314:	2300      	movs	r3, #0
 8000316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000318:	f04f 32ff 	mov.w	r2, #4294967295
 800031c:	69bb      	ldr	r3, [r7, #24]
 800031e:	fa02 f303 	lsl.w	r3, r2, r3
 8000322:	43da      	mvns	r2, r3
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	401a      	ands	r2, r3
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800032c:	f04f 31ff 	mov.w	r1, #4294967295
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	fa01 f303 	lsl.w	r3, r1, r3
 8000336:	43d9      	mvns	r1, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800033c:	4313      	orrs	r3, r2
         );
}
 800033e:	4618      	mov	r0, r3
 8000340:	3724      	adds	r7, #36	; 0x24
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr

08000348 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	60da      	str	r2, [r3, #12]
}
 800035c:	bf00      	nop
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr

08000366 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000366:	b480      	push	{r7}
 8000368:	b083      	sub	sp, #12
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	691b      	ldr	r3, [r3, #16]
 8000372:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	615a      	str	r2, [r3, #20]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr

08000390 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f003 0320 	and.w	r3, r3, #32
 80003a0:	2b20      	cmp	r3, #32
 80003a2:	bf0c      	ite	eq
 80003a4:	2301      	moveq	r3, #1
 80003a6:	2300      	movne	r3, #0
 80003a8:	b2db      	uxtb	r3, r3
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr

080003b4 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003c4:	2b80      	cmp	r3, #128	; 0x80
 80003c6:	bf0c      	ite	eq
 80003c8:	2301      	moveq	r3, #1
 80003ca:	2300      	movne	r3, #0
 80003cc:	b2db      	uxtb	r3, r3
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr

080003d8 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	68db      	ldr	r3, [r3, #12]
 80003e4:	f043 0220 	orr.w	r2, r3, #32
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	60da      	str	r2, [r3, #12]
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr

080003f6 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
 80003f6:	b480      	push	{r7}
 80003f8:	b083      	sub	sp, #12
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	68db      	ldr	r3, [r3, #12]
 8000402:	f003 0320 	and.w	r3, r3, #32
 8000406:	2b20      	cmp	r3, #32
 8000408:	bf0c      	ite	eq
 800040a:	2301      	moveq	r3, #1
 800040c:	2300      	movne	r3, #0
 800040e:	b2db      	uxtb	r3, r3
}
 8000410:	4618      	mov	r0, r3
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	bc80      	pop	{r7}
 8000418:	4770      	bx	lr

0800041a <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 800041a:	b480      	push	{r7}
 800041c:	b083      	sub	sp, #12
 800041e:	af00      	add	r7, sp, #0
 8000420:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	b2db      	uxtb	r3, r3
}
 8000428:	4618      	mov	r0, r3
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr

08000432 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000432:	b480      	push	{r7}
 8000434:	b083      	sub	sp, #12
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
 800043a:	460b      	mov	r3, r1
 800043c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800043e:	78fa      	ldrb	r2, [r7, #3]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	605a      	str	r2, [r3, #4]
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr
	...

08000450 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000450:	b480      	push	{r7}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <LL_APB2_GRP1_EnableClock+0x2c>)
 800045a:	699a      	ldr	r2, [r3, #24]
 800045c:	4907      	ldr	r1, [pc, #28]	; (800047c <LL_APB2_GRP1_EnableClock+0x2c>)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4313      	orrs	r3, r2
 8000462:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000466:	699a      	ldr	r2, [r3, #24]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4013      	ands	r3, r2
 800046c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800046e:	68fb      	ldr	r3, [r7, #12]
}
 8000470:	bf00      	nop
 8000472:	3714      	adds	r7, #20
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000

08000480 <USART1_IRQHandler>:
  * @brief  The application entry point.
  * @retval int
  */

void USART1_IRQHandler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	if (LL_USART_IsActiveFlag_RXNE (USART1) && LL_USART_IsEnabledIT_RXNE (USART1))
 8000484:	480e      	ldr	r0, [pc, #56]	; (80004c0 <USART1_IRQHandler+0x40>)
 8000486:	f7ff ff83 	bl	8000390 <LL_USART_IsActiveFlag_RXNE>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d011      	beq.n	80004b4 <USART1_IRQHandler+0x34>
 8000490:	480b      	ldr	r0, [pc, #44]	; (80004c0 <USART1_IRQHandler+0x40>)
 8000492:	f7ff ffb0 	bl	80003f6 <LL_USART_IsEnabledIT_RXNE>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d00b      	beq.n	80004b4 <USART1_IRQHandler+0x34>
	{
	        bufbyte = LL_USART_ReceiveData8 (USART1);
 800049c:	4808      	ldr	r0, [pc, #32]	; (80004c0 <USART1_IRQHandler+0x40>)
 800049e:	f7ff ffbc 	bl	800041a <LL_USART_ReceiveData8>
 80004a2:	4603      	mov	r3, r0
 80004a4:	461a      	mov	r2, r3
 80004a6:	4b07      	ldr	r3, [pc, #28]	; (80004c4 <USART1_IRQHandler+0x44>)
 80004a8:	701a      	strb	r2, [r3, #0]
	        fifo_write_byte(bufbyte);
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <USART1_IRQHandler+0x44>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff fe54 	bl	800015c <fifo_write_byte>
	};
	ch = 1;
 80004b4:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <USART1_IRQHandler+0x48>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART1_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40013800 	.word	0x40013800
 80004c4:	2000010c 	.word	0x2000010c
 80004c8:	200002a8 	.word	0x200002a8

080004cc <UART1_PutChar>:
		LL_USART_TransmitData8(USART1, *p++);
	}
}

void UART1_PutChar(uint8_t data)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART1, data);
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	4619      	mov	r1, r3
 80004da:	4807      	ldr	r0, [pc, #28]	; (80004f8 <UART1_PutChar+0x2c>)
 80004dc:	f7ff ffa9 	bl	8000432 <LL_USART_TransmitData8>
	/* Wait for TXE flag to be raised */
	while (!LL_USART_IsActiveFlag_TXE(USART1));
 80004e0:	bf00      	nop
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <UART1_PutChar+0x2c>)
 80004e4:	f7ff ff66 	bl	80003b4 <LL_USART_IsActiveFlag_TXE>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d0f9      	beq.n	80004e2 <UART1_PutChar+0x16>
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40013800 	.word	0x40013800

080004fc <UART1_PutStr>:

void UART1_PutStr(char *string)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	while(*string != '\0') UART1_PutChar(*string++);
 8000504:	e006      	b.n	8000514 <UART1_PutStr+0x18>
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	1c5a      	adds	r2, r3, #1
 800050a:	607a      	str	r2, [r7, #4]
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff ffdc 	bl	80004cc <UART1_PutChar>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d1f4      	bne.n	8000506 <UART1_PutStr+0xa>
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <s_i>:


int s_i(uint8_t *str)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
    uint16_t num=0;
 800052c:	2300      	movs	r3, #0
 800052e:	81fb      	strh	r3, [r7, #14]

         for (int i = 0; i < strlen(str); i++)
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	e012      	b.n	800055c <s_i+0x38>
         {
            num = num * (10);
 8000536:	89fb      	ldrh	r3, [r7, #14]
 8000538:	461a      	mov	r2, r3
 800053a:	0092      	lsls	r2, r2, #2
 800053c:	4413      	add	r3, r2
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	81fb      	strh	r3, [r7, #14]
            num += str[i] - '0' ;
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	4413      	add	r3, r2
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	b29a      	uxth	r2, r3
 800054c:	89fb      	ldrh	r3, [r7, #14]
 800054e:	4413      	add	r3, r2
 8000550:	b29b      	uxth	r3, r3
 8000552:	3b30      	subs	r3, #48	; 0x30
 8000554:	81fb      	strh	r3, [r7, #14]
         for (int i = 0; i < strlen(str); i++)
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	3301      	adds	r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f7ff fdf5 	bl	800014c <strlen>
 8000562:	4602      	mov	r2, r0
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	429a      	cmp	r2, r3
 8000568:	d8e5      	bhi.n	8000536 <s_i+0x12>
         }
    //     printf("%d\n", num);

         return num;
 800056a:	89fb      	ldrh	r3, [r7, #14]
}
 800056c:	4618      	mov	r0, r3
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <main>:




int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08e      	sub	sp, #56	; 0x38
 8000578:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 facd 	bl	8000b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f8e9 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f995 	bl	80008b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000586:	f000 f92b 	bl	80007e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_USART_EnableIT_RXNE (USART1);
 800058a:	4866      	ldr	r0, [pc, #408]	; (8000724 <main+0x1b0>)
 800058c:	f7ff ff24 	bl	80003d8 <LL_USART_EnableIT_RXNE>
  /* USER CODE END 2 */

//  uart_send_string("histm\n");
  UART1_PutStr("histm\n");
 8000590:	4865      	ldr	r0, [pc, #404]	; (8000728 <main+0x1b4>)
 8000592:	f7ff ffb3 	bl	80004fc <UART1_PutStr>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  	  	  	  	  memset(s1,0,sizeof(s1));
 8000596:	2264      	movs	r2, #100	; 0x64
 8000598:	2100      	movs	r1, #0
 800059a:	4864      	ldr	r0, [pc, #400]	; (800072c <main+0x1b8>)
 800059c:	f001 fca4 	bl	8001ee8 <memset>
	  	  	  	  	  uint8_t n=0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  		  		  while(fifo_data_available())
 80005a6:	e00c      	b.n	80005c2 <main+0x4e>
	  		  		  {
	  		  		  		 s1[n] = fifo_read_byte();
 80005a8:	f7ff fe0c 	bl	80001c4 <fifo_read_byte>
 80005ac:	4602      	mov	r2, r0
 80005ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80005b2:	b2d1      	uxtb	r1, r2
 80005b4:	4a5d      	ldr	r2, [pc, #372]	; (800072c <main+0x1b8>)
 80005b6:	54d1      	strb	r1, [r2, r3]
	  		  		  		// UART1_PutChar(s1[n]);
	  		  		  		 n++;
 80005b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80005bc:	3301      	adds	r3, #1
 80005be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  		  		  while(fifo_data_available())
 80005c2:	f7ff fe31 	bl	8000228 <fifo_data_available>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d1ed      	bne.n	80005a8 <main+0x34>
	  		  		  }

	  	  	  	  	  while(ch)
 80005cc:	e0a4      	b.n	8000718 <main+0x1a4>
	  	  	  	  	  {

	  	  	  	  		  UART1_PutStr(s1);
 80005ce:	4857      	ldr	r0, [pc, #348]	; (800072c <main+0x1b8>)
 80005d0:	f7ff ff94 	bl	80004fc <UART1_PutStr>
	    		 	 	  int i=0, j=0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	633b      	str	r3, [r7, #48]	; 0x30
 80005d8:	2300      	movs	r3, #0
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
	    	              while((s1[i] > 47) && (s1[i] < 58))
 80005dc:	e00b      	b.n	80005f6 <main+0x82>
	    	              {
	    	                  s2[i] = s1[i];
 80005de:	4a53      	ldr	r2, [pc, #332]	; (800072c <main+0x1b8>)
 80005e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005e2:	4413      	add	r3, r2
 80005e4:	7819      	ldrb	r1, [r3, #0]
 80005e6:	4a52      	ldr	r2, [pc, #328]	; (8000730 <main+0x1bc>)
 80005e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005ea:	4413      	add	r3, r2
 80005ec:	460a      	mov	r2, r1
 80005ee:	701a      	strb	r2, [r3, #0]
	    	                  i++;
 80005f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005f2:	3301      	adds	r3, #1
 80005f4:	633b      	str	r3, [r7, #48]	; 0x30
	    	              while((s1[i] > 47) && (s1[i] < 58))
 80005f6:	4a4d      	ldr	r2, [pc, #308]	; (800072c <main+0x1b8>)
 80005f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005fa:	4413      	add	r3, r2
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b2f      	cmp	r3, #47	; 0x2f
 8000600:	d905      	bls.n	800060e <main+0x9a>
 8000602:	4a4a      	ldr	r2, [pc, #296]	; (800072c <main+0x1b8>)
 8000604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000606:	4413      	add	r3, r2
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b39      	cmp	r3, #57	; 0x39
 800060c:	d9e7      	bls.n	80005de <main+0x6a>
	    	              }
	    	              a = s_i(s2);
 800060e:	4848      	ldr	r0, [pc, #288]	; (8000730 <main+0x1bc>)
 8000610:	f7ff ff88 	bl	8000524 <s_i>
 8000614:	4603      	mov	r3, r0
 8000616:	b29a      	uxth	r2, r3
 8000618:	4b46      	ldr	r3, [pc, #280]	; (8000734 <main+0x1c0>)
 800061a:	801a      	strh	r2, [r3, #0]
	    	              char adata[20];
	    	              sprintf(adata, "a = %d\n", a);
 800061c:	4b45      	ldr	r3, [pc, #276]	; (8000734 <main+0x1c0>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	461a      	mov	r2, r3
 8000622:	f107 0318 	add.w	r3, r7, #24
 8000626:	4944      	ldr	r1, [pc, #272]	; (8000738 <main+0x1c4>)
 8000628:	4618      	mov	r0, r3
 800062a:	f001 fc65 	bl	8001ef8 <siprintf>
	    	              UART1_PutStr(adata);
 800062e:	f107 0318 	add.w	r3, r7, #24
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ff62 	bl	80004fc <UART1_PutStr>

	    	              op = s1[i];
 8000638:	4a3c      	ldr	r2, [pc, #240]	; (800072c <main+0x1b8>)
 800063a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800063c:	4413      	add	r3, r2
 800063e:	781a      	ldrb	r2, [r3, #0]
 8000640:	4b3e      	ldr	r3, [pc, #248]	; (800073c <main+0x1c8>)
 8000642:	701a      	strb	r2, [r3, #0]

	    	              i++;
 8000644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000646:	3301      	adds	r3, #1
 8000648:	633b      	str	r3, [r7, #48]	; 0x30

	    	              while(s1[i] != '\n')
 800064a:	e00e      	b.n	800066a <main+0xf6>
	    	              {
	    	                  s3[j] = s1[i];
 800064c:	4a37      	ldr	r2, [pc, #220]	; (800072c <main+0x1b8>)
 800064e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000650:	4413      	add	r3, r2
 8000652:	7819      	ldrb	r1, [r3, #0]
 8000654:	4a3a      	ldr	r2, [pc, #232]	; (8000740 <main+0x1cc>)
 8000656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000658:	4413      	add	r3, r2
 800065a:	460a      	mov	r2, r1
 800065c:	701a      	strb	r2, [r3, #0]
	    	                  i++;
 800065e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000660:	3301      	adds	r3, #1
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
	    	                  j++;
 8000664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000666:	3301      	adds	r3, #1
 8000668:	62fb      	str	r3, [r7, #44]	; 0x2c
	    	              while(s1[i] != '\n')
 800066a:	4a30      	ldr	r2, [pc, #192]	; (800072c <main+0x1b8>)
 800066c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800066e:	4413      	add	r3, r2
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b0a      	cmp	r3, #10
 8000674:	d1ea      	bne.n	800064c <main+0xd8>
	    	              }
	    	              b = s_i(s3);
 8000676:	4832      	ldr	r0, [pc, #200]	; (8000740 <main+0x1cc>)
 8000678:	f7ff ff54 	bl	8000524 <s_i>
 800067c:	4603      	mov	r3, r0
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b30      	ldr	r3, [pc, #192]	; (8000744 <main+0x1d0>)
 8000682:	801a      	strh	r2, [r3, #0]
	    	              char bdata[20];
	    	              sprintf(bdata, "b = %d\n", b);
 8000684:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <main+0x1d0>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	492e      	ldr	r1, [pc, #184]	; (8000748 <main+0x1d4>)
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fc32 	bl	8001ef8 <siprintf>
	    	              UART1_PutStr(bdata);
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff30 	bl	80004fc <UART1_PutStr>

	    	              switch(op)
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <main+0x1c8>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	3b2a      	subs	r3, #42	; 0x2a
 80006a2:	2b05      	cmp	r3, #5
 80006a4:	d834      	bhi.n	8000710 <main+0x19c>
 80006a6:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <main+0x138>)
 80006a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ac:	080006e9 	.word	0x080006e9
 80006b0:	080006c5 	.word	0x080006c5
 80006b4:	08000711 	.word	0x08000711
 80006b8:	080006d7 	.word	0x080006d7
 80006bc:	08000711 	.word	0x08000711
 80006c0:	080006fd 	.word	0x080006fd
	    	              {
	    	                  case '+':
	    	                      c=a+b;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <main+0x1c0>)
 80006c6:	881a      	ldrh	r2, [r3, #0]
 80006c8:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <main+0x1d0>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	4413      	add	r3, r2
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <main+0x1d8>)
 80006d2:	801a      	strh	r2, [r3, #0]
	    	                    //  uprintf(c);

	    	                  break;
 80006d4:	e01d      	b.n	8000712 <main+0x19e>
	    	                  case '-':
	    	                      c=a-b;
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <main+0x1c0>)
 80006d8:	881a      	ldrh	r2, [r3, #0]
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <main+0x1d0>)
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <main+0x1d8>)
 80006e4:	801a      	strh	r2, [r3, #0]
	    	                   //   uprintf(c);

	    	                  break;
 80006e6:	e014      	b.n	8000712 <main+0x19e>
	    	                  case '*':
	    	                      c=a*b;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <main+0x1c0>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	4a15      	ldr	r2, [pc, #84]	; (8000744 <main+0x1d0>)
 80006ee:	8812      	ldrh	r2, [r2, #0]
 80006f0:	fb02 f303 	mul.w	r3, r2, r3
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <main+0x1d8>)
 80006f8:	801a      	strh	r2, [r3, #0]
	    	                   //   uprintf(c);

	    	                  break;
 80006fa:	e00a      	b.n	8000712 <main+0x19e>
	    	                  case '/':
	    	                      c=a/b;
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <main+0x1c0>)
 80006fe:	881a      	ldrh	r2, [r3, #0]
 8000700:	4b10      	ldr	r3, [pc, #64]	; (8000744 <main+0x1d0>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	fbb2 f3f3 	udiv	r3, r2, r3
 8000708:	b29a      	uxth	r2, r3
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <main+0x1d8>)
 800070c:	801a      	strh	r2, [r3, #0]
	    	                   //   uprintf(c);

	    	                  break;
 800070e:	e000      	b.n	8000712 <main+0x19e>
	    	                  default:
	    	                  break;
 8000710:	bf00      	nop
	    	              }

	    	              ch = 0;
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <main+0x1dc>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
	  	  	  	  	  while(ch)
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <main+0x1dc>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	f47f af56 	bne.w	80005ce <main+0x5a>
  {
 8000722:	e738      	b.n	8000596 <main+0x22>
 8000724:	40013800 	.word	0x40013800
 8000728:	08002734 	.word	0x08002734
 800072c:	20000110 	.word	0x20000110
 8000730:	20000178 	.word	0x20000178
 8000734:	200001dc 	.word	0x200001dc
 8000738:	0800273c 	.word	0x0800273c
 800073c:	20000108 	.word	0x20000108
 8000740:	20000244 	.word	0x20000244
 8000744:	2000010a 	.word	0x2000010a
 8000748:	08002744 	.word	0x08002744
 800074c:	20000174 	.word	0x20000174
 8000750:	200002a8 	.word	0x200002a8

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b090      	sub	sp, #64	; 0x40
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0318 	add.w	r3, r7, #24
 800075e:	2228      	movs	r2, #40	; 0x28
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f001 fbc0 	bl	8001ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000776:	2301      	movs	r3, #1
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800077e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000784:	2301      	movs	r3, #1
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	2302      	movs	r3, #2
 800078a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000790:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000792:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000798:	f107 0318 	add.w	r3, r7, #24
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fc73 	bl	8001088 <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007a8:	f000 f8ce 	bl	8000948 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ac:	230f      	movs	r3, #15
 80007ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b0:	2302      	movs	r3, #2
 80007b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2102      	movs	r1, #2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fede 	bl	8001588 <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007d2:	f000 f8b9 	bl	8000948 <Error_Handler>
  }
}
 80007d6:	bf00      	nop
 80007d8:	3740      	adds	r7, #64	; 0x40
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08c      	sub	sp, #48	; 0x30
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
 80007f6:	615a      	str	r2, [r3, #20]
 80007f8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	463b      	mov	r3, r7
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000808:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800080c:	f7ff fe20 	bl	8000450 <LL_APB2_GRP1_EnableClock>
  
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000810:	2004      	movs	r0, #4
 8000812:	f7ff fe1d 	bl	8000450 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration  
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000816:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <MX_USART1_UART_Init+0xc0>)
 8000818:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800081a:	2309      	movs	r3, #9
 800081c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800081e:	2303      	movs	r3, #3
 8000820:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	463b      	mov	r3, r7
 8000828:	4619      	mov	r1, r3
 800082a:	481e      	ldr	r0, [pc, #120]	; (80008a4 <MX_USART1_UART_Init+0xc4>)
 800082c:	f001 f8ce 	bl	80019cc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000830:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_USART1_UART_Init+0xc8>)
 8000832:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000834:	2304      	movs	r3, #4
 8000836:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	463b      	mov	r3, r7
 800083a:	4619      	mov	r1, r3
 800083c:	4819      	ldr	r0, [pc, #100]	; (80008a4 <MX_USART1_UART_Init+0xc4>)
 800083e:	f001 f8c5 	bl	80019cc <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000842:	f7ff fcfb 	bl	800023c <__NVIC_GetPriorityGrouping>
 8000846:	4603      	mov	r3, r0
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fd49 	bl	80002e4 <NVIC_EncodePriority>
 8000852:	4603      	mov	r3, r0
 8000854:	4619      	mov	r1, r3
 8000856:	2025      	movs	r0, #37	; 0x25
 8000858:	f7ff fd1a 	bl	8000290 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800085c:	2025      	movs	r0, #37	; 0x25
 800085e:	f7ff fcfb 	bl	8000258 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000862:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000866:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000874:	230c      	movs	r3, #12
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4809      	ldr	r0, [pc, #36]	; (80008ac <MX_USART1_UART_Init+0xcc>)
 8000888:	f001 faa4 	bl	8001dd4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800088c:	4807      	ldr	r0, [pc, #28]	; (80008ac <MX_USART1_UART_Init+0xcc>)
 800088e:	f7ff fd6a 	bl	8000366 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000892:	4806      	ldr	r0, [pc, #24]	; (80008ac <MX_USART1_UART_Init+0xcc>)
 8000894:	f7ff fd58 	bl	8000348 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3730      	adds	r7, #48	; 0x30
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	04020002 	.word	0x04020002
 80008a4:	40010800 	.word	0x40010800
 80008a8:	04040004 	.word	0x04040004
 80008ac:	40013800 	.word	0x40013800

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0310 	add.w	r3, r7, #16
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c4:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <MX_GPIO_Init+0x90>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a1d      	ldr	r2, [pc, #116]	; (8000940 <MX_GPIO_Init+0x90>)
 80008ca:	f043 0310 	orr.w	r3, r3, #16
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_GPIO_Init+0x90>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0310 	and.w	r3, r3, #16
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_GPIO_Init+0x90>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a17      	ldr	r2, [pc, #92]	; (8000940 <MX_GPIO_Init+0x90>)
 80008e2:	f043 0320 	orr.w	r3, r3, #32
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_GPIO_Init+0x90>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0320 	and.w	r3, r3, #32
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_GPIO_Init+0x90>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a11      	ldr	r2, [pc, #68]	; (8000940 <MX_GPIO_Init+0x90>)
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_GPIO_Init+0x90>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f003 0304 	and.w	r3, r3, #4
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000912:	480c      	ldr	r0, [pc, #48]	; (8000944 <MX_GPIO_Init+0x94>)
 8000914:	f000 fba0 	bl	8001058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8000918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2302      	movs	r3, #2
 8000928:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 0310 	add.w	r3, r7, #16
 800092e:	4619      	mov	r1, r3
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_GPIO_Init+0x94>)
 8000932:	f000 fa37 	bl	8000da4 <HAL_GPIO_Init>

}
 8000936:	bf00      	nop
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000
 8000944:	40011000 	.word	0x40011000

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_MspInit+0x5c>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <HAL_MspInit+0x5c>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6193      	str	r3, [r2, #24]
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_MspInit+0x5c>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <HAL_MspInit+0x5c>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <HAL_MspInit+0x5c>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	61d3      	str	r3, [r2, #28]
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <HAL_MspInit+0x5c>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <HAL_MspInit+0x60>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <HAL_MspInit+0x60>)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40010000 	.word	0x40010000

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <HardFault_Handler+0x4>

080009ca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <MemManage_Handler+0x4>

080009d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <BusFault_Handler+0x4>

080009d6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <UsageFault_Handler+0x4>

080009dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr

08000a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a04:	f000 f8ce 	bl	8000ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <_sbrk+0x50>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d102      	bne.n	8000a22 <_sbrk+0x16>
		heap_end = &end;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <_sbrk+0x50>)
 8000a1e:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <_sbrk+0x54>)
 8000a20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <_sbrk+0x50>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <_sbrk+0x50>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4413      	add	r3, r2
 8000a30:	466a      	mov	r2, sp
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d907      	bls.n	8000a46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a36:	f001 fa2d 	bl	8001e94 <__errno>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a40:	f04f 33ff 	mov.w	r3, #4294967295
 8000a44:	e006      	b.n	8000a54 <_sbrk+0x48>
	}

	heap_end += incr;
 8000a46:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <_sbrk+0x50>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	4a03      	ldr	r2, [pc, #12]	; (8000a5c <_sbrk+0x50>)
 8000a50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a52:	68fb      	ldr	r3, [r7, #12]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	2000008c 	.word	0x2000008c
 8000a60:	200002b8 	.word	0x200002b8

08000a64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <SystemInit+0x5c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <SystemInit+0x5c>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <SystemInit+0x5c>)
 8000a76:	685a      	ldr	r2, [r3, #4]
 8000a78:	4911      	ldr	r1, [pc, #68]	; (8000ac0 <SystemInit+0x5c>)
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <SystemInit+0x60>)
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <SystemInit+0x5c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <SystemInit+0x5c>)
 8000a86:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a8e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <SystemInit+0x5c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <SystemInit+0x5c>)
 8000a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a9a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <SystemInit+0x5c>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <SystemInit+0x5c>)
 8000aa2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000aa6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <SystemInit+0x5c>)
 8000aaa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000aae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <SystemInit+0x64>)
 8000ab2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ab6:	609a      	str	r2, [r3, #8]
#endif 
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	f8ff0000 	.word	0xf8ff0000
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000acc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ace:	e003      	b.n	8000ad8 <LoopCopyDataInit>

08000ad0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ad2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ad4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ad6:	3104      	adds	r1, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ad8:	480a      	ldr	r0, [pc, #40]	; (8000b04 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000adc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ade:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ae0:	d3f6      	bcc.n	8000ad0 <CopyDataInit>
  ldr r2, =_sbss
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ae4:	e002      	b.n	8000aec <LoopFillZerobss>

08000ae6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ae8:	f842 3b04 	str.w	r3, [r2], #4

08000aec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000aee:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000af0:	d3f9      	bcc.n	8000ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000af2:	f7ff ffb7 	bl	8000a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af6:	f001 f9d3 	bl	8001ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000afa:	f7ff fd3b 	bl	8000574 <main>
  bx lr
 8000afe:	4770      	bx	lr
  ldr r3, =_sidata
 8000b00:	080027b4 	.word	0x080027b4
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b08:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000b0c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000b10:	200002b4 	.word	0x200002b4

08000b14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b14:	e7fe      	b.n	8000b14 <ADC1_2_IRQHandler>
	...

08000b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_Init+0x28>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_Init+0x28>)
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 f907 	bl	8000d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f000 f808 	bl	8000b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b34:	f7ff ff0e 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40022000 	.word	0x40022000

08000b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_InitTick+0x54>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_InitTick+0x58>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4619      	mov	r1, r3
 8000b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f911 	bl	8000d8a <HAL_SYSTICK_Config>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e00e      	b.n	8000b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b0f      	cmp	r3, #15
 8000b76:	d80a      	bhi.n	8000b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	f000 f8e7 	bl	8000d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b84:	4a06      	ldr	r2, [pc, #24]	; (8000ba0 <HAL_InitTick+0x5c>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e000      	b.n	8000b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_IncTick+0x1c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <HAL_IncTick+0x20>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a03      	ldr	r2, [pc, #12]	; (8000bc4 <HAL_IncTick+0x20>)
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	200002ac 	.word	0x200002ac

08000bc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b02      	ldr	r3, [pc, #8]	; (8000bd8 <HAL_GetTick+0x10>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	200002ac 	.word	0x200002ac

08000bdc <__NVIC_SetPriorityGrouping>:
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	60d3      	str	r3, [r2, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_GetPriorityGrouping>:
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_SetPriority>:
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	; (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	; (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	; 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr

08000cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d08:	d301      	bcc.n	8000d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e00f      	b.n	8000d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <SysTick_Config+0x40>)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d16:	210f      	movs	r1, #15
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1c:	f7ff ff90 	bl	8000c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <SysTick_Config+0x40>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <SysTick_Config+0x40>)
 8000d28:	2207      	movs	r2, #7
 8000d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	e000e010 	.word	0xe000e010

08000d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff ff49 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b086      	sub	sp, #24
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	4603      	mov	r3, r0
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d64:	f7ff ff5e 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	68b9      	ldr	r1, [r7, #8]
 8000d6e:	6978      	ldr	r0, [r7, #20]
 8000d70:	f7ff ff90 	bl	8000c94 <NVIC_EncodePriority>
 8000d74:	4602      	mov	r2, r0
 8000d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff5f 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d82:	bf00      	nop
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ffb0 	bl	8000cf8 <SysTick_Config>
 8000d98:	4603      	mov	r3, r0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b08b      	sub	sp, #44	; 0x2c
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000db2:	2300      	movs	r3, #0
 8000db4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db6:	e127      	b.n	8001008 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000db8:	2201      	movs	r2, #1
 8000dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	69fa      	ldr	r2, [r7, #28]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	f040 8116 	bne.w	8001002 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2b12      	cmp	r3, #18
 8000ddc:	d034      	beq.n	8000e48 <HAL_GPIO_Init+0xa4>
 8000dde:	2b12      	cmp	r3, #18
 8000de0:	d80d      	bhi.n	8000dfe <HAL_GPIO_Init+0x5a>
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d02b      	beq.n	8000e3e <HAL_GPIO_Init+0x9a>
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d804      	bhi.n	8000df4 <HAL_GPIO_Init+0x50>
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d031      	beq.n	8000e52 <HAL_GPIO_Init+0xae>
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d01c      	beq.n	8000e2c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000df2:	e048      	b.n	8000e86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000df4:	2b03      	cmp	r3, #3
 8000df6:	d043      	beq.n	8000e80 <HAL_GPIO_Init+0xdc>
 8000df8:	2b11      	cmp	r3, #17
 8000dfa:	d01b      	beq.n	8000e34 <HAL_GPIO_Init+0x90>
          break;
 8000dfc:	e043      	b.n	8000e86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000dfe:	4a89      	ldr	r2, [pc, #548]	; (8001024 <HAL_GPIO_Init+0x280>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d026      	beq.n	8000e52 <HAL_GPIO_Init+0xae>
 8000e04:	4a87      	ldr	r2, [pc, #540]	; (8001024 <HAL_GPIO_Init+0x280>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d806      	bhi.n	8000e18 <HAL_GPIO_Init+0x74>
 8000e0a:	4a87      	ldr	r2, [pc, #540]	; (8001028 <HAL_GPIO_Init+0x284>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d020      	beq.n	8000e52 <HAL_GPIO_Init+0xae>
 8000e10:	4a86      	ldr	r2, [pc, #536]	; (800102c <HAL_GPIO_Init+0x288>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d01d      	beq.n	8000e52 <HAL_GPIO_Init+0xae>
          break;
 8000e16:	e036      	b.n	8000e86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e18:	4a85      	ldr	r2, [pc, #532]	; (8001030 <HAL_GPIO_Init+0x28c>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d019      	beq.n	8000e52 <HAL_GPIO_Init+0xae>
 8000e1e:	4a85      	ldr	r2, [pc, #532]	; (8001034 <HAL_GPIO_Init+0x290>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d016      	beq.n	8000e52 <HAL_GPIO_Init+0xae>
 8000e24:	4a84      	ldr	r2, [pc, #528]	; (8001038 <HAL_GPIO_Init+0x294>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d013      	beq.n	8000e52 <HAL_GPIO_Init+0xae>
          break;
 8000e2a:	e02c      	b.n	8000e86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	623b      	str	r3, [r7, #32]
          break;
 8000e32:	e028      	b.n	8000e86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	623b      	str	r3, [r7, #32]
          break;
 8000e3c:	e023      	b.n	8000e86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	3308      	adds	r3, #8
 8000e44:	623b      	str	r3, [r7, #32]
          break;
 8000e46:	e01e      	b.n	8000e86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	330c      	adds	r3, #12
 8000e4e:	623b      	str	r3, [r7, #32]
          break;
 8000e50:	e019      	b.n	8000e86 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d102      	bne.n	8000e60 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	623b      	str	r3, [r7, #32]
          break;
 8000e5e:	e012      	b.n	8000e86 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d105      	bne.n	8000e74 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e68:	2308      	movs	r3, #8
 8000e6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69fa      	ldr	r2, [r7, #28]
 8000e70:	611a      	str	r2, [r3, #16]
          break;
 8000e72:	e008      	b.n	8000e86 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e74:	2308      	movs	r3, #8
 8000e76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	69fa      	ldr	r2, [r7, #28]
 8000e7c:	615a      	str	r2, [r3, #20]
          break;
 8000e7e:	e002      	b.n	8000e86 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
          break;
 8000e84:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	2bff      	cmp	r3, #255	; 0xff
 8000e8a:	d801      	bhi.n	8000e90 <HAL_GPIO_Init+0xec>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	e001      	b.n	8000e94 <HAL_GPIO_Init+0xf0>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3304      	adds	r3, #4
 8000e94:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	2bff      	cmp	r3, #255	; 0xff
 8000e9a:	d802      	bhi.n	8000ea2 <HAL_GPIO_Init+0xfe>
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	e002      	b.n	8000ea8 <HAL_GPIO_Init+0x104>
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	3b08      	subs	r3, #8
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	210f      	movs	r1, #15
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	401a      	ands	r2, r3
 8000eba:	6a39      	ldr	r1, [r7, #32]
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	431a      	orrs	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f000 8096 	beq.w	8001002 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ed6:	4b59      	ldr	r3, [pc, #356]	; (800103c <HAL_GPIO_Init+0x298>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	4a58      	ldr	r2, [pc, #352]	; (800103c <HAL_GPIO_Init+0x298>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6193      	str	r3, [r2, #24]
 8000ee2:	4b56      	ldr	r3, [pc, #344]	; (800103c <HAL_GPIO_Init+0x298>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000eee:	4a54      	ldr	r2, [pc, #336]	; (8001040 <HAL_GPIO_Init+0x29c>)
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	089b      	lsrs	r3, r3, #2
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efe:	f003 0303 	and.w	r3, r3, #3
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	220f      	movs	r2, #15
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4b      	ldr	r2, [pc, #300]	; (8001044 <HAL_GPIO_Init+0x2a0>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d013      	beq.n	8000f42 <HAL_GPIO_Init+0x19e>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4a      	ldr	r2, [pc, #296]	; (8001048 <HAL_GPIO_Init+0x2a4>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d00d      	beq.n	8000f3e <HAL_GPIO_Init+0x19a>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a49      	ldr	r2, [pc, #292]	; (800104c <HAL_GPIO_Init+0x2a8>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d007      	beq.n	8000f3a <HAL_GPIO_Init+0x196>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a48      	ldr	r2, [pc, #288]	; (8001050 <HAL_GPIO_Init+0x2ac>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d101      	bne.n	8000f36 <HAL_GPIO_Init+0x192>
 8000f32:	2303      	movs	r3, #3
 8000f34:	e006      	b.n	8000f44 <HAL_GPIO_Init+0x1a0>
 8000f36:	2304      	movs	r3, #4
 8000f38:	e004      	b.n	8000f44 <HAL_GPIO_Init+0x1a0>
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	e002      	b.n	8000f44 <HAL_GPIO_Init+0x1a0>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e000      	b.n	8000f44 <HAL_GPIO_Init+0x1a0>
 8000f42:	2300      	movs	r3, #0
 8000f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f46:	f002 0203 	and.w	r2, r2, #3
 8000f4a:	0092      	lsls	r2, r2, #2
 8000f4c:	4093      	lsls	r3, r2
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f54:	493a      	ldr	r1, [pc, #232]	; (8001040 <HAL_GPIO_Init+0x29c>)
 8000f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f58:	089b      	lsrs	r3, r3, #2
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d006      	beq.n	8000f7c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f6e:	4b39      	ldr	r3, [pc, #228]	; (8001054 <HAL_GPIO_Init+0x2b0>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	4938      	ldr	r1, [pc, #224]	; (8001054 <HAL_GPIO_Init+0x2b0>)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	600b      	str	r3, [r1, #0]
 8000f7a:	e006      	b.n	8000f8a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f7c:	4b35      	ldr	r3, [pc, #212]	; (8001054 <HAL_GPIO_Init+0x2b0>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	4933      	ldr	r1, [pc, #204]	; (8001054 <HAL_GPIO_Init+0x2b0>)
 8000f86:	4013      	ands	r3, r2
 8000f88:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d006      	beq.n	8000fa4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f96:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <HAL_GPIO_Init+0x2b0>)
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	492e      	ldr	r1, [pc, #184]	; (8001054 <HAL_GPIO_Init+0x2b0>)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	604b      	str	r3, [r1, #4]
 8000fa2:	e006      	b.n	8000fb2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fa4:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <HAL_GPIO_Init+0x2b0>)
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	4929      	ldr	r1, [pc, #164]	; (8001054 <HAL_GPIO_Init+0x2b0>)
 8000fae:	4013      	ands	r3, r2
 8000fb0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d006      	beq.n	8000fcc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fbe:	4b25      	ldr	r3, [pc, #148]	; (8001054 <HAL_GPIO_Init+0x2b0>)
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	4924      	ldr	r1, [pc, #144]	; (8001054 <HAL_GPIO_Init+0x2b0>)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	608b      	str	r3, [r1, #8]
 8000fca:	e006      	b.n	8000fda <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fcc:	4b21      	ldr	r3, [pc, #132]	; (8001054 <HAL_GPIO_Init+0x2b0>)
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	491f      	ldr	r1, [pc, #124]	; (8001054 <HAL_GPIO_Init+0x2b0>)
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d006      	beq.n	8000ff4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <HAL_GPIO_Init+0x2b0>)
 8000fe8:	68da      	ldr	r2, [r3, #12]
 8000fea:	491a      	ldr	r1, [pc, #104]	; (8001054 <HAL_GPIO_Init+0x2b0>)
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	60cb      	str	r3, [r1, #12]
 8000ff2:	e006      	b.n	8001002 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <HAL_GPIO_Init+0x2b0>)
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	4915      	ldr	r1, [pc, #84]	; (8001054 <HAL_GPIO_Init+0x2b0>)
 8000ffe:	4013      	ands	r3, r2
 8001000:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	3301      	adds	r3, #1
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	fa22 f303 	lsr.w	r3, r2, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	f47f aed0 	bne.w	8000db8 <HAL_GPIO_Init+0x14>
  }
}
 8001018:	bf00      	nop
 800101a:	372c      	adds	r7, #44	; 0x2c
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	10210000 	.word	0x10210000
 8001028:	10110000 	.word	0x10110000
 800102c:	10120000 	.word	0x10120000
 8001030:	10310000 	.word	0x10310000
 8001034:	10320000 	.word	0x10320000
 8001038:	10220000 	.word	0x10220000
 800103c:	40021000 	.word	0x40021000
 8001040:	40010000 	.word	0x40010000
 8001044:	40010800 	.word	0x40010800
 8001048:	40010c00 	.word	0x40010c00
 800104c:	40011000 	.word	0x40011000
 8001050:	40011400 	.word	0x40011400
 8001054:	40010400 	.word	0x40010400

08001058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
 8001064:	4613      	mov	r3, r2
 8001066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001068:	787b      	ldrb	r3, [r7, #1]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800106e:	887a      	ldrh	r2, [r7, #2]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001074:	e003      	b.n	800107e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	041a      	lsls	r2, r3, #16
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	611a      	str	r2, [r3, #16]
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e26c      	b.n	8001574 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 8087 	beq.w	80011b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010a8:	4b92      	ldr	r3, [pc, #584]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 030c 	and.w	r3, r3, #12
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d00c      	beq.n	80010ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010b4:	4b8f      	ldr	r3, [pc, #572]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 030c 	and.w	r3, r3, #12
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d112      	bne.n	80010e6 <HAL_RCC_OscConfig+0x5e>
 80010c0:	4b8c      	ldr	r3, [pc, #560]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010cc:	d10b      	bne.n	80010e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ce:	4b89      	ldr	r3, [pc, #548]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d06c      	beq.n	80011b4 <HAL_RCC_OscConfig+0x12c>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d168      	bne.n	80011b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e246      	b.n	8001574 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ee:	d106      	bne.n	80010fe <HAL_RCC_OscConfig+0x76>
 80010f0:	4b80      	ldr	r3, [pc, #512]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a7f      	ldr	r2, [pc, #508]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80010f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	e02e      	b.n	800115c <HAL_RCC_OscConfig+0xd4>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10c      	bne.n	8001120 <HAL_RCC_OscConfig+0x98>
 8001106:	4b7b      	ldr	r3, [pc, #492]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a7a      	ldr	r2, [pc, #488]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 800110c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4b78      	ldr	r3, [pc, #480]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a77      	ldr	r2, [pc, #476]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e01d      	b.n	800115c <HAL_RCC_OscConfig+0xd4>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001128:	d10c      	bne.n	8001144 <HAL_RCC_OscConfig+0xbc>
 800112a:	4b72      	ldr	r3, [pc, #456]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a71      	ldr	r2, [pc, #452]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	4b6f      	ldr	r3, [pc, #444]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a6e      	ldr	r2, [pc, #440]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 800113c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	e00b      	b.n	800115c <HAL_RCC_OscConfig+0xd4>
 8001144:	4b6b      	ldr	r3, [pc, #428]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a6a      	ldr	r2, [pc, #424]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 800114a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	4b68      	ldr	r3, [pc, #416]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a67      	ldr	r2, [pc, #412]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800115a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d013      	beq.n	800118c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fd30 	bl	8000bc8 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800116c:	f7ff fd2c 	bl	8000bc8 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b64      	cmp	r3, #100	; 0x64
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e1fa      	b.n	8001574 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117e:	4b5d      	ldr	r3, [pc, #372]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f0      	beq.n	800116c <HAL_RCC_OscConfig+0xe4>
 800118a:	e014      	b.n	80011b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fd1c 	bl	8000bc8 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff fd18 	bl	8000bc8 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	; 0x64
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e1e6      	b.n	8001574 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a6:	4b53      	ldr	r3, [pc, #332]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f0      	bne.n	8001194 <HAL_RCC_OscConfig+0x10c>
 80011b2:	e000      	b.n	80011b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d063      	beq.n	800128a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011c2:	4b4c      	ldr	r3, [pc, #304]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 030c 	and.w	r3, r3, #12
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d00b      	beq.n	80011e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011ce:	4b49      	ldr	r3, [pc, #292]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 030c 	and.w	r3, r3, #12
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	d11c      	bne.n	8001214 <HAL_RCC_OscConfig+0x18c>
 80011da:	4b46      	ldr	r3, [pc, #280]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d116      	bne.n	8001214 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e6:	4b43      	ldr	r3, [pc, #268]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d005      	beq.n	80011fe <HAL_RCC_OscConfig+0x176>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d001      	beq.n	80011fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e1ba      	b.n	8001574 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fe:	4b3d      	ldr	r3, [pc, #244]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	4939      	ldr	r1, [pc, #228]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 800120e:	4313      	orrs	r3, r2
 8001210:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001212:	e03a      	b.n	800128a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d020      	beq.n	800125e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800121c:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <HAL_RCC_OscConfig+0x270>)
 800121e:	2201      	movs	r2, #1
 8001220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001222:	f7ff fcd1 	bl	8000bc8 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800122a:	f7ff fccd 	bl	8000bc8 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e19b      	b.n	8001574 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123c:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0f0      	beq.n	800122a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001248:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4927      	ldr	r1, [pc, #156]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001258:	4313      	orrs	r3, r2
 800125a:	600b      	str	r3, [r1, #0]
 800125c:	e015      	b.n	800128a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800125e:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <HAL_RCC_OscConfig+0x270>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fcb0 	bl	8000bc8 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800126c:	f7ff fcac 	bl	8000bc8 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e17a      	b.n	8001574 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127e:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	2b00      	cmp	r3, #0
 8001294:	d03a      	beq.n	800130c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d019      	beq.n	80012d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <HAL_RCC_OscConfig+0x274>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a4:	f7ff fc90 	bl	8000bc8 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ac:	f7ff fc8c 	bl	8000bc8 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e15a      	b.n	8001574 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f0      	beq.n	80012ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012ca:	2001      	movs	r0, #1
 80012cc:	f000 faa8 	bl	8001820 <RCC_Delay>
 80012d0:	e01c      	b.n	800130c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_RCC_OscConfig+0x274>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d8:	f7ff fc76 	bl	8000bc8 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012de:	e00f      	b.n	8001300 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012e0:	f7ff fc72 	bl	8000bc8 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d908      	bls.n	8001300 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e140      	b.n	8001574 <HAL_RCC_OscConfig+0x4ec>
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000
 80012f8:	42420000 	.word	0x42420000
 80012fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001300:	4b9e      	ldr	r3, [pc, #632]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 8001302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1e9      	bne.n	80012e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 80a6 	beq.w	8001466 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800131e:	4b97      	ldr	r3, [pc, #604]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10d      	bne.n	8001346 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	4b94      	ldr	r3, [pc, #592]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	4a93      	ldr	r2, [pc, #588]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001334:	61d3      	str	r3, [r2, #28]
 8001336:	4b91      	ldr	r3, [pc, #580]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001342:	2301      	movs	r3, #1
 8001344:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001346:	4b8e      	ldr	r3, [pc, #568]	; (8001580 <HAL_RCC_OscConfig+0x4f8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134e:	2b00      	cmp	r3, #0
 8001350:	d118      	bne.n	8001384 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001352:	4b8b      	ldr	r3, [pc, #556]	; (8001580 <HAL_RCC_OscConfig+0x4f8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a8a      	ldr	r2, [pc, #552]	; (8001580 <HAL_RCC_OscConfig+0x4f8>)
 8001358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800135e:	f7ff fc33 	bl	8000bc8 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001366:	f7ff fc2f 	bl	8000bc8 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b64      	cmp	r3, #100	; 0x64
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e0fd      	b.n	8001574 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001378:	4b81      	ldr	r3, [pc, #516]	; (8001580 <HAL_RCC_OscConfig+0x4f8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f0      	beq.n	8001366 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d106      	bne.n	800139a <HAL_RCC_OscConfig+0x312>
 800138c:	4b7b      	ldr	r3, [pc, #492]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	4a7a      	ldr	r2, [pc, #488]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6213      	str	r3, [r2, #32]
 8001398:	e02d      	b.n	80013f6 <HAL_RCC_OscConfig+0x36e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10c      	bne.n	80013bc <HAL_RCC_OscConfig+0x334>
 80013a2:	4b76      	ldr	r3, [pc, #472]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	4a75      	ldr	r2, [pc, #468]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 80013a8:	f023 0301 	bic.w	r3, r3, #1
 80013ac:	6213      	str	r3, [r2, #32]
 80013ae:	4b73      	ldr	r3, [pc, #460]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	4a72      	ldr	r2, [pc, #456]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 80013b4:	f023 0304 	bic.w	r3, r3, #4
 80013b8:	6213      	str	r3, [r2, #32]
 80013ba:	e01c      	b.n	80013f6 <HAL_RCC_OscConfig+0x36e>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	2b05      	cmp	r3, #5
 80013c2:	d10c      	bne.n	80013de <HAL_RCC_OscConfig+0x356>
 80013c4:	4b6d      	ldr	r3, [pc, #436]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	4a6c      	ldr	r2, [pc, #432]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	6213      	str	r3, [r2, #32]
 80013d0:	4b6a      	ldr	r3, [pc, #424]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	4a69      	ldr	r2, [pc, #420]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6213      	str	r3, [r2, #32]
 80013dc:	e00b      	b.n	80013f6 <HAL_RCC_OscConfig+0x36e>
 80013de:	4b67      	ldr	r3, [pc, #412]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	4a66      	ldr	r2, [pc, #408]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 80013e4:	f023 0301 	bic.w	r3, r3, #1
 80013e8:	6213      	str	r3, [r2, #32]
 80013ea:	4b64      	ldr	r3, [pc, #400]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	4a63      	ldr	r2, [pc, #396]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 80013f0:	f023 0304 	bic.w	r3, r3, #4
 80013f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d015      	beq.n	800142a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fe:	f7ff fbe3 	bl	8000bc8 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001404:	e00a      	b.n	800141c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001406:	f7ff fbdf 	bl	8000bc8 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	f241 3288 	movw	r2, #5000	; 0x1388
 8001414:	4293      	cmp	r3, r2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e0ab      	b.n	8001574 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800141c:	4b57      	ldr	r3, [pc, #348]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0ee      	beq.n	8001406 <HAL_RCC_OscConfig+0x37e>
 8001428:	e014      	b.n	8001454 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142a:	f7ff fbcd 	bl	8000bc8 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001430:	e00a      	b.n	8001448 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001432:	f7ff fbc9 	bl	8000bc8 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001440:	4293      	cmp	r3, r2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e095      	b.n	8001574 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001448:	4b4c      	ldr	r3, [pc, #304]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1ee      	bne.n	8001432 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001454:	7dfb      	ldrb	r3, [r7, #23]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d105      	bne.n	8001466 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800145a:	4b48      	ldr	r3, [pc, #288]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	4a47      	ldr	r2, [pc, #284]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 8001460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001464:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 8081 	beq.w	8001572 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001470:	4b42      	ldr	r3, [pc, #264]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 030c 	and.w	r3, r3, #12
 8001478:	2b08      	cmp	r3, #8
 800147a:	d061      	beq.n	8001540 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d146      	bne.n	8001512 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001484:	4b3f      	ldr	r3, [pc, #252]	; (8001584 <HAL_RCC_OscConfig+0x4fc>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148a:	f7ff fb9d 	bl	8000bc8 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001492:	f7ff fb99 	bl	8000bc8 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e067      	b.n	8001574 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a4:	4b35      	ldr	r3, [pc, #212]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f0      	bne.n	8001492 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b8:	d108      	bne.n	80014cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014ba:	4b30      	ldr	r3, [pc, #192]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	492d      	ldr	r1, [pc, #180]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a19      	ldr	r1, [r3, #32]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	430b      	orrs	r3, r1
 80014de:	4927      	ldr	r1, [pc, #156]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014e4:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_RCC_OscConfig+0x4fc>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ea:	f7ff fb6d 	bl	8000bc8 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f2:	f7ff fb69 	bl	8000bc8 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e037      	b.n	8001574 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x46a>
 8001510:	e02f      	b.n	8001572 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001512:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <HAL_RCC_OscConfig+0x4fc>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fb56 	bl	8000bc8 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001520:	f7ff fb52 	bl	8000bc8 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e020      	b.n	8001574 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x498>
 800153e:	e018      	b.n	8001572 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e013      	b.n	8001574 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_RCC_OscConfig+0x4f4>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	429a      	cmp	r2, r3
 800155e:	d106      	bne.n	800156e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156a:	429a      	cmp	r2, r3
 800156c:	d001      	beq.n	8001572 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000
 8001580:	40007000 	.word	0x40007000
 8001584:	42420060 	.word	0x42420060

08001588 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0d0      	b.n	800173e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800159c:	4b6a      	ldr	r3, [pc, #424]	; (8001748 <HAL_RCC_ClockConfig+0x1c0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d910      	bls.n	80015cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015aa:	4b67      	ldr	r3, [pc, #412]	; (8001748 <HAL_RCC_ClockConfig+0x1c0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 0207 	bic.w	r2, r3, #7
 80015b2:	4965      	ldr	r1, [pc, #404]	; (8001748 <HAL_RCC_ClockConfig+0x1c0>)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ba:	4b63      	ldr	r3, [pc, #396]	; (8001748 <HAL_RCC_ClockConfig+0x1c0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0b8      	b.n	800173e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d020      	beq.n	800161a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e4:	4b59      	ldr	r3, [pc, #356]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	4a58      	ldr	r2, [pc, #352]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 80015ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015fc:	4b53      	ldr	r3, [pc, #332]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4a52      	ldr	r2, [pc, #328]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001606:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001608:	4b50      	ldr	r3, [pc, #320]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	494d      	ldr	r1, [pc, #308]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	4313      	orrs	r3, r2
 8001618:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d040      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d107      	bne.n	800163e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	4b47      	ldr	r3, [pc, #284]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d115      	bne.n	8001666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e07f      	b.n	800173e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d107      	bne.n	8001656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001646:	4b41      	ldr	r3, [pc, #260]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d109      	bne.n	8001666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e073      	b.n	800173e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001656:	4b3d      	ldr	r3, [pc, #244]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e06b      	b.n	800173e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001666:	4b39      	ldr	r3, [pc, #228]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f023 0203 	bic.w	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	4936      	ldr	r1, [pc, #216]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001678:	f7ff faa6 	bl	8000bc8 <HAL_GetTick>
 800167c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167e:	e00a      	b.n	8001696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001680:	f7ff faa2 	bl	8000bc8 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f241 3288 	movw	r2, #5000	; 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e053      	b.n	800173e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001696:	4b2d      	ldr	r3, [pc, #180]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 020c 	and.w	r2, r3, #12
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d1eb      	bne.n	8001680 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016a8:	4b27      	ldr	r3, [pc, #156]	; (8001748 <HAL_RCC_ClockConfig+0x1c0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d210      	bcs.n	80016d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b6:	4b24      	ldr	r3, [pc, #144]	; (8001748 <HAL_RCC_ClockConfig+0x1c0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f023 0207 	bic.w	r2, r3, #7
 80016be:	4922      	ldr	r1, [pc, #136]	; (8001748 <HAL_RCC_ClockConfig+0x1c0>)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <HAL_RCC_ClockConfig+0x1c0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e032      	b.n	800173e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d008      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4916      	ldr	r1, [pc, #88]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d009      	beq.n	8001716 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	490e      	ldr	r1, [pc, #56]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 8001712:	4313      	orrs	r3, r2
 8001714:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001716:	f000 f821 	bl	800175c <HAL_RCC_GetSysClockFreq>
 800171a:	4601      	mov	r1, r0
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	091b      	lsrs	r3, r3, #4
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 8001728:	5cd3      	ldrb	r3, [r2, r3]
 800172a:	fa21 f303 	lsr.w	r3, r1, r3
 800172e:	4a09      	ldr	r2, [pc, #36]	; (8001754 <HAL_RCC_ClockConfig+0x1cc>)
 8001730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_RCC_ClockConfig+0x1d0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fa04 	bl	8000b44 <HAL_InitTick>

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40022000 	.word	0x40022000
 800174c:	40021000 	.word	0x40021000
 8001750:	08002760 	.word	0x08002760
 8001754:	20000000 	.word	0x20000000
 8001758:	20000004 	.word	0x20000004

0800175c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800175c:	b490      	push	{r4, r7}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001762:	4b2a      	ldr	r3, [pc, #168]	; (800180c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001764:	1d3c      	adds	r4, r7, #4
 8001766:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001768:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800176c:	4b28      	ldr	r3, [pc, #160]	; (8001810 <HAL_RCC_GetSysClockFreq+0xb4>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001786:	4b23      	ldr	r3, [pc, #140]	; (8001814 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	2b04      	cmp	r3, #4
 8001794:	d002      	beq.n	800179c <HAL_RCC_GetSysClockFreq+0x40>
 8001796:	2b08      	cmp	r3, #8
 8001798:	d003      	beq.n	80017a2 <HAL_RCC_GetSysClockFreq+0x46>
 800179a:	e02d      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800179c:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <HAL_RCC_GetSysClockFreq+0xbc>)
 800179e:	623b      	str	r3, [r7, #32]
      break;
 80017a0:	e02d      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	0c9b      	lsrs	r3, r3, #18
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017ae:	4413      	add	r3, r2
 80017b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d013      	beq.n	80017e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017c0:	4b14      	ldr	r3, [pc, #80]	; (8001814 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	0c5b      	lsrs	r3, r3, #17
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017ce:	4413      	add	r3, r2
 80017d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017da:	fb02 f203 	mul.w	r2, r2, r3
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
 80017e6:	e004      	b.n	80017f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	4a0c      	ldr	r2, [pc, #48]	; (800181c <HAL_RCC_GetSysClockFreq+0xc0>)
 80017ec:	fb02 f303 	mul.w	r3, r2, r3
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	623b      	str	r3, [r7, #32]
      break;
 80017f6:	e002      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017fa:	623b      	str	r3, [r7, #32]
      break;
 80017fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017fe:	6a3b      	ldr	r3, [r7, #32]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3728      	adds	r7, #40	; 0x28
 8001804:	46bd      	mov	sp, r7
 8001806:	bc90      	pop	{r4, r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	0800274c 	.word	0x0800274c
 8001810:	0800275c 	.word	0x0800275c
 8001814:	40021000 	.word	0x40021000
 8001818:	007a1200 	.word	0x007a1200
 800181c:	003d0900 	.word	0x003d0900

08001820 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001828:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <RCC_Delay+0x34>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <RCC_Delay+0x38>)
 800182e:	fba2 2303 	umull	r2, r3, r2, r3
 8001832:	0a5b      	lsrs	r3, r3, #9
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	fb02 f303 	mul.w	r3, r2, r3
 800183a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800183c:	bf00      	nop
  }
  while (Delay --);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1e5a      	subs	r2, r3, #1
 8001842:	60fa      	str	r2, [r7, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1f9      	bne.n	800183c <RCC_Delay+0x1c>
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000000 	.word	0x20000000
 8001858:	10624dd3 	.word	0x10624dd3

0800185c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800185c:	b490      	push	{r4, r7}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	461a      	mov	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	0e1b      	lsrs	r3, r3, #24
 8001870:	4413      	add	r3, r2
 8001872:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001874:	6822      	ldr	r2, [r4, #0]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	fa93 f3a3 	rbit	r3, r3
 8001880:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	fab3 f383 	clz	r3, r3
 8001888:	b2db      	uxtb	r3, r3
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	210f      	movs	r1, #15
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	401a      	ands	r2, r3
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	fa93 f3a3 	rbit	r3, r3
 80018a0:	61bb      	str	r3, [r7, #24]
  return result;
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	fab3 f383 	clz	r3, r3
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	4313      	orrs	r3, r2
 80018b4:	6023      	str	r3, [r4, #0]
}
 80018b6:	bf00      	nop
 80018b8:	3720      	adds	r7, #32
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc90      	pop	{r4, r7}
 80018be:	4770      	bx	lr

080018c0 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80018c0:	b490      	push	{r4, r7}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	461a      	mov	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	0e1b      	lsrs	r3, r3, #24
 80018d4:	4413      	add	r3, r2
 80018d6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80018d8:	6822      	ldr	r2, [r4, #0]
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	fa93 f3a3 	rbit	r3, r3
 80018e4:	613b      	str	r3, [r7, #16]
  return result;
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	fab3 f383 	clz	r3, r3
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	2103      	movs	r1, #3
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	401a      	ands	r2, r3
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	fa93 f3a3 	rbit	r3, r3
 8001904:	61bb      	str	r3, [r7, #24]
  return result;
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	4313      	orrs	r3, r2
 8001918:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 800191a:	bf00      	nop
 800191c:	3720      	adds	r7, #32
 800191e:	46bd      	mov	sp, r7
 8001920:	bc90      	pop	{r4, r7}
 8001922:	4770      	bx	lr

08001924 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8001924:	b490      	push	{r4, r7}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	461a      	mov	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	0e1b      	lsrs	r3, r3, #24
 8001938:	4413      	add	r3, r2
 800193a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800193c:	6822      	ldr	r2, [r4, #0]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	fa93 f3a3 	rbit	r3, r3
 8001948:	613b      	str	r3, [r7, #16]
  return result;
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	fab3 f383 	clz	r3, r3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	2104      	movs	r1, #4
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	401a      	ands	r2, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	61bb      	str	r3, [r7, #24]
  return result;
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	fab3 f383 	clz	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	4313      	orrs	r3, r2
 800197c:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 800197e:	bf00      	nop
 8001980:	3720      	adds	r7, #32
 8001982:	46bd      	mov	sp, r7
 8001984:	bc90      	pop	{r4, r7}
 8001986:	4770      	bx	lr

08001988 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	0a1b      	lsrs	r3, r3, #8
 800199c:	43db      	mvns	r3, r3
 800199e:	401a      	ands	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	0a1b      	lsrs	r3, r3, #8
 80019a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	fa93 f3a3 	rbit	r3, r3
 80019ac:	613b      	str	r3, [r7, #16]
  return result;
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	fab3 f383 	clz	r3, r3
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	4619      	mov	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	408b      	lsls	r3, r1
 80019bc:	431a      	orrs	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	60da      	str	r2, [r3, #12]
}
 80019c2:	bf00      	nop
 80019c4:	371c      	adds	r7, #28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	0c1b      	lsrs	r3, r3, #16
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	fa93 f3a3 	rbit	r3, r3
 80019ea:	60fb      	str	r3, [r7, #12]
  return result;
 80019ec:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80019ee:	fab3 f383 	clz	r3, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80019f6:	e040      	b.n	8001a7a <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80019f8:	2201      	movs	r2, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	409a      	lsls	r2, r3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d036      	beq.n	8001a74 <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	2b07      	cmp	r3, #7
 8001a0a:	d806      	bhi.n	8001a1a <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8001a0c:	f240 1201 	movw	r2, #257	; 0x101
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	61bb      	str	r3, [r7, #24]
 8001a18:	e008      	b.n	8001a2c <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b08      	subs	r3, #8
 8001a1e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a2a:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	461a      	mov	r2, r3
 8001a32:	69b9      	ldr	r1, [r7, #24]
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff11 	bl	800185c <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	69b9      	ldr	r1, [r7, #24]
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ffa0 	bl	8001988 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d003      	beq.n	8001a58 <LL_GPIO_Init+0x8c>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b09      	cmp	r3, #9
 8001a56:	d10d      	bne.n	8001a74 <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	69b9      	ldr	r1, [r7, #24]
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff2d 	bl	80018c0 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	69b9      	ldr	r1, [r7, #24]
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ff58 	bl	8001924 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	3301      	adds	r3, #1
 8001a78:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1b8      	bne.n	80019f8 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3720      	adds	r7, #32
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <LL_RCC_GetSysClkSource+0x14>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 030c 	and.w	r3, r3, #12
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	40021000 	.word	0x40021000

08001aa8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <LL_RCC_GetAHBPrescaler+0x14>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	40021000 	.word	0x40021000

08001ac0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <LL_RCC_GetAPB2Prescaler+0x14>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	40021000 	.word	0x40021000

08001af0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <LL_RCC_PLL_GetMainSource+0x14>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	40021000 	.word	0x40021000

08001b08 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	40021000 	.word	0x40021000

08001b20 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <LL_RCC_PLL_GetPrediv+0x18>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	0c5b      	lsrs	r3, r3, #17
 8001b2a:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000

08001b3c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001b44:	f000 f820 	bl	8001b88 <RCC_GetSystemClockFreq>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 f83a 	bl	8001bcc <RCC_GetHCLKClockFreq>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 f848 	bl	8001bf8 <RCC_GetPCLK1ClockFreq>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 f854 	bl	8001c20 <RCC_GetPCLK2ClockFreq>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	60da      	str	r2, [r3, #12]
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001b92:	f7ff ff7d 	bl	8001a90 <LL_RCC_GetSysClkSource>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d006      	beq.n	8001baa <RCC_GetSystemClockFreq+0x22>
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d007      	beq.n	8001bb0 <RCC_GetSystemClockFreq+0x28>
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d109      	bne.n	8001bb8 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <RCC_GetSystemClockFreq+0x40>)
 8001ba6:	607b      	str	r3, [r7, #4]
      break;
 8001ba8:	e009      	b.n	8001bbe <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <RCC_GetSystemClockFreq+0x40>)
 8001bac:	607b      	str	r3, [r7, #4]
      break;
 8001bae:	e006      	b.n	8001bbe <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001bb0:	f000 f84a 	bl	8001c48 <RCC_PLL_GetFreqDomain_SYS>
 8001bb4:	6078      	str	r0, [r7, #4]
      break;
 8001bb6:	e002      	b.n	8001bbe <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <RCC_GetSystemClockFreq+0x40>)
 8001bba:	607b      	str	r3, [r7, #4]
      break;
 8001bbc:	bf00      	nop
  }

  return frequency;
 8001bbe:	687b      	ldr	r3, [r7, #4]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	007a1200 	.word	0x007a1200

08001bcc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001bd4:	f7ff ff68 	bl	8001aa8 <LL_RCC_GetAHBPrescaler>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	091b      	lsrs	r3, r3, #4
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <RCC_GetHCLKClockFreq+0x28>)
 8001be2:	5cd3      	ldrb	r3, [r2, r3]
 8001be4:	461a      	mov	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	40d3      	lsrs	r3, r2
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	08002760 	.word	0x08002760

08001bf8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001c00:	f7ff ff5e 	bl	8001ac0 <LL_RCC_GetAPB1Prescaler>
 8001c04:	4603      	mov	r3, r0
 8001c06:	0a1b      	lsrs	r3, r3, #8
 8001c08:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <RCC_GetPCLK1ClockFreq+0x24>)
 8001c0a:	5cd3      	ldrb	r3, [r2, r3]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	40d3      	lsrs	r3, r2
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	08002770 	.word	0x08002770

08001c20 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001c28:	f7ff ff56 	bl	8001ad8 <LL_RCC_GetAPB2Prescaler>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	0adb      	lsrs	r3, r3, #11
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <RCC_GetPCLK2ClockFreq+0x24>)
 8001c32:	5cd3      	ldrb	r3, [r2, r3]
 8001c34:	461a      	mov	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	40d3      	lsrs	r3, r2
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	08002770 	.word	0x08002770

08001c48 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	2300      	movs	r3, #0
 8001c54:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001c56:	f7ff ff4b 	bl	8001af0 <LL_RCC_PLL_GetMainSource>
 8001c5a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c66:	d003      	beq.n	8001c70 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001c68:	e00b      	b.n	8001c82 <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8001c6c:	607b      	str	r3, [r7, #4]
      break;
 8001c6e:	e00b      	b.n	8001c88 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8001c70:	f7ff ff56 	bl	8001b20 <LL_RCC_PLL_GetPrediv>
 8001c74:	4603      	mov	r3, r0
 8001c76:	3301      	adds	r3, #1
 8001c78:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7e:	607b      	str	r3, [r7, #4]
      break;
 8001c80:	e002      	b.n	8001c88 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8001c84:	607b      	str	r3, [r7, #4]
      break;
 8001c86:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8001c88:	f7ff ff3e 	bl	8001b08 <LL_RCC_PLL_GetMultiplicator>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	0c9b      	lsrs	r3, r3, #18
 8001c90:	3302      	adds	r3, #2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	fb02 f303 	mul.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	003d0900 	.word	0x003d0900
 8001ca4:	007a1200 	.word	0x007a1200

08001ca8 <LL_USART_IsEnabled>:
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cbc:	bf0c      	ite	eq
 8001cbe:	2301      	moveq	r3, #1
 8001cc0:	2300      	movne	r3, #0
 8001cc2:	b2db      	uxtb	r3, r3
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr

08001cce <LL_USART_SetStopBitsLength>:
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	611a      	str	r2, [r3, #16]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <LL_USART_SetHWFlowCtrl>:
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	615a      	str	r2, [r3, #20]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
	...

08001d18 <LL_USART_SetBaudRate>:
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009a      	lsls	r2, r3, #2
 8001d2e:	441a      	add	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d38:	4a25      	ldr	r2, [pc, #148]	; (8001dd0 <LL_USART_SetBaudRate+0xb8>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	b299      	uxth	r1, r3
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009a      	lsls	r2, r3, #2
 8001d50:	441a      	add	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <LL_USART_SetBaudRate+0xb8>)
 8001d5c:	fba3 0302 	umull	r0, r3, r3, r2
 8001d60:	095b      	lsrs	r3, r3, #5
 8001d62:	2064      	movs	r0, #100	; 0x64
 8001d64:	fb00 f303 	mul.w	r3, r0, r3
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	3332      	adds	r3, #50	; 0x32
 8001d6e:	4a18      	ldr	r2, [pc, #96]	; (8001dd0 <LL_USART_SetBaudRate+0xb8>)
 8001d70:	fba2 2303 	umull	r2, r3, r2, r3
 8001d74:	095b      	lsrs	r3, r3, #5
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	440b      	add	r3, r1
 8001d80:	b299      	uxth	r1, r3
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	009a      	lsls	r2, r3, #2
 8001d8c:	441a      	add	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <LL_USART_SetBaudRate+0xb8>)
 8001d98:	fba3 0302 	umull	r0, r3, r3, r2
 8001d9c:	095b      	lsrs	r3, r3, #5
 8001d9e:	2064      	movs	r0, #100	; 0x64
 8001da0:	fb00 f303 	mul.w	r3, r0, r3
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	3332      	adds	r3, #50	; 0x32
 8001daa:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <LL_USART_SetBaudRate+0xb8>)
 8001dac:	fba2 2303 	umull	r2, r3, r2, r3
 8001db0:	095b      	lsrs	r3, r3, #5
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	f003 030f 	and.w	r3, r3, #15
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	440b      	add	r3, r1
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	609a      	str	r2, [r3, #8]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	51eb851f 	.word	0x51eb851f

08001dd4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ff5e 	bl	8001ca8 <LL_USART_IsEnabled>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d145      	bne.n	8001e7e <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001dfa:	f023 030c 	bic.w	r3, r3, #12
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	6851      	ldr	r1, [r2, #4]
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	68d2      	ldr	r2, [r2, #12]
 8001e06:	4311      	orrs	r1, r2
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	6912      	ldr	r2, [r2, #16]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ff57 	bl	8001cce <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	4619      	mov	r1, r3
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ff63 	bl	8001cf2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001e2c:	f107 0308 	add.w	r3, r7, #8
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fe83 	bl	8001b3c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a13      	ldr	r2, [pc, #76]	; (8001e88 <LL_USART_Init+0xb4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d102      	bne.n	8001e44 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	61bb      	str	r3, [r7, #24]
 8001e42:	e00c      	b.n	8001e5e <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a11      	ldr	r2, [pc, #68]	; (8001e8c <LL_USART_Init+0xb8>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d102      	bne.n	8001e52 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	e005      	b.n	8001e5e <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a0e      	ldr	r2, [pc, #56]	; (8001e90 <LL_USART_Init+0xbc>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d101      	bne.n	8001e5e <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00c      	beq.n	8001e7e <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d008      	beq.n	8001e7e <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	69b9      	ldr	r1, [r7, #24]
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff4d 	bl	8001d18 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001e7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3720      	adds	r7, #32
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40013800 	.word	0x40013800
 8001e8c:	40004400 	.word	0x40004400
 8001e90:	40004800 	.word	0x40004800

08001e94 <__errno>:
 8001e94:	4b01      	ldr	r3, [pc, #4]	; (8001e9c <__errno+0x8>)
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	2000000c 	.word	0x2000000c

08001ea0 <__libc_init_array>:
 8001ea0:	b570      	push	{r4, r5, r6, lr}
 8001ea2:	2500      	movs	r5, #0
 8001ea4:	4e0c      	ldr	r6, [pc, #48]	; (8001ed8 <__libc_init_array+0x38>)
 8001ea6:	4c0d      	ldr	r4, [pc, #52]	; (8001edc <__libc_init_array+0x3c>)
 8001ea8:	1ba4      	subs	r4, r4, r6
 8001eaa:	10a4      	asrs	r4, r4, #2
 8001eac:	42a5      	cmp	r5, r4
 8001eae:	d109      	bne.n	8001ec4 <__libc_init_array+0x24>
 8001eb0:	f000 fc34 	bl	800271c <_init>
 8001eb4:	2500      	movs	r5, #0
 8001eb6:	4e0a      	ldr	r6, [pc, #40]	; (8001ee0 <__libc_init_array+0x40>)
 8001eb8:	4c0a      	ldr	r4, [pc, #40]	; (8001ee4 <__libc_init_array+0x44>)
 8001eba:	1ba4      	subs	r4, r4, r6
 8001ebc:	10a4      	asrs	r4, r4, #2
 8001ebe:	42a5      	cmp	r5, r4
 8001ec0:	d105      	bne.n	8001ece <__libc_init_array+0x2e>
 8001ec2:	bd70      	pop	{r4, r5, r6, pc}
 8001ec4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ec8:	4798      	blx	r3
 8001eca:	3501      	adds	r5, #1
 8001ecc:	e7ee      	b.n	8001eac <__libc_init_array+0xc>
 8001ece:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ed2:	4798      	blx	r3
 8001ed4:	3501      	adds	r5, #1
 8001ed6:	e7f2      	b.n	8001ebe <__libc_init_array+0x1e>
 8001ed8:	080027ac 	.word	0x080027ac
 8001edc:	080027ac 	.word	0x080027ac
 8001ee0:	080027ac 	.word	0x080027ac
 8001ee4:	080027b0 	.word	0x080027b0

08001ee8 <memset>:
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4402      	add	r2, r0
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d100      	bne.n	8001ef2 <memset+0xa>
 8001ef0:	4770      	bx	lr
 8001ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ef6:	e7f9      	b.n	8001eec <memset+0x4>

08001ef8 <siprintf>:
 8001ef8:	b40e      	push	{r1, r2, r3}
 8001efa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001efe:	b500      	push	{lr}
 8001f00:	b09c      	sub	sp, #112	; 0x70
 8001f02:	ab1d      	add	r3, sp, #116	; 0x74
 8001f04:	9002      	str	r0, [sp, #8]
 8001f06:	9006      	str	r0, [sp, #24]
 8001f08:	9107      	str	r1, [sp, #28]
 8001f0a:	9104      	str	r1, [sp, #16]
 8001f0c:	4808      	ldr	r0, [pc, #32]	; (8001f30 <siprintf+0x38>)
 8001f0e:	4909      	ldr	r1, [pc, #36]	; (8001f34 <siprintf+0x3c>)
 8001f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f14:	9105      	str	r1, [sp, #20]
 8001f16:	6800      	ldr	r0, [r0, #0]
 8001f18:	a902      	add	r1, sp, #8
 8001f1a:	9301      	str	r3, [sp, #4]
 8001f1c:	f000 f866 	bl	8001fec <_svfiprintf_r>
 8001f20:	2200      	movs	r2, #0
 8001f22:	9b02      	ldr	r3, [sp, #8]
 8001f24:	701a      	strb	r2, [r3, #0]
 8001f26:	b01c      	add	sp, #112	; 0x70
 8001f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f2c:	b003      	add	sp, #12
 8001f2e:	4770      	bx	lr
 8001f30:	2000000c 	.word	0x2000000c
 8001f34:	ffff0208 	.word	0xffff0208

08001f38 <__ssputs_r>:
 8001f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f3c:	688e      	ldr	r6, [r1, #8]
 8001f3e:	4682      	mov	sl, r0
 8001f40:	429e      	cmp	r6, r3
 8001f42:	460c      	mov	r4, r1
 8001f44:	4690      	mov	r8, r2
 8001f46:	4699      	mov	r9, r3
 8001f48:	d837      	bhi.n	8001fba <__ssputs_r+0x82>
 8001f4a:	898a      	ldrh	r2, [r1, #12]
 8001f4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001f50:	d031      	beq.n	8001fb6 <__ssputs_r+0x7e>
 8001f52:	2302      	movs	r3, #2
 8001f54:	6825      	ldr	r5, [r4, #0]
 8001f56:	6909      	ldr	r1, [r1, #16]
 8001f58:	1a6f      	subs	r7, r5, r1
 8001f5a:	6965      	ldr	r5, [r4, #20]
 8001f5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f60:	fb95 f5f3 	sdiv	r5, r5, r3
 8001f64:	f109 0301 	add.w	r3, r9, #1
 8001f68:	443b      	add	r3, r7
 8001f6a:	429d      	cmp	r5, r3
 8001f6c:	bf38      	it	cc
 8001f6e:	461d      	movcc	r5, r3
 8001f70:	0553      	lsls	r3, r2, #21
 8001f72:	d530      	bpl.n	8001fd6 <__ssputs_r+0x9e>
 8001f74:	4629      	mov	r1, r5
 8001f76:	f000 fb37 	bl	80025e8 <_malloc_r>
 8001f7a:	4606      	mov	r6, r0
 8001f7c:	b950      	cbnz	r0, 8001f94 <__ssputs_r+0x5c>
 8001f7e:	230c      	movs	r3, #12
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	f8ca 3000 	str.w	r3, [sl]
 8001f88:	89a3      	ldrh	r3, [r4, #12]
 8001f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f8e:	81a3      	strh	r3, [r4, #12]
 8001f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f94:	463a      	mov	r2, r7
 8001f96:	6921      	ldr	r1, [r4, #16]
 8001f98:	f000 fab6 	bl	8002508 <memcpy>
 8001f9c:	89a3      	ldrh	r3, [r4, #12]
 8001f9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa6:	81a3      	strh	r3, [r4, #12]
 8001fa8:	6126      	str	r6, [r4, #16]
 8001faa:	443e      	add	r6, r7
 8001fac:	6026      	str	r6, [r4, #0]
 8001fae:	464e      	mov	r6, r9
 8001fb0:	6165      	str	r5, [r4, #20]
 8001fb2:	1bed      	subs	r5, r5, r7
 8001fb4:	60a5      	str	r5, [r4, #8]
 8001fb6:	454e      	cmp	r6, r9
 8001fb8:	d900      	bls.n	8001fbc <__ssputs_r+0x84>
 8001fba:	464e      	mov	r6, r9
 8001fbc:	4632      	mov	r2, r6
 8001fbe:	4641      	mov	r1, r8
 8001fc0:	6820      	ldr	r0, [r4, #0]
 8001fc2:	f000 faac 	bl	800251e <memmove>
 8001fc6:	68a3      	ldr	r3, [r4, #8]
 8001fc8:	2000      	movs	r0, #0
 8001fca:	1b9b      	subs	r3, r3, r6
 8001fcc:	60a3      	str	r3, [r4, #8]
 8001fce:	6823      	ldr	r3, [r4, #0]
 8001fd0:	441e      	add	r6, r3
 8001fd2:	6026      	str	r6, [r4, #0]
 8001fd4:	e7dc      	b.n	8001f90 <__ssputs_r+0x58>
 8001fd6:	462a      	mov	r2, r5
 8001fd8:	f000 fb60 	bl	800269c <_realloc_r>
 8001fdc:	4606      	mov	r6, r0
 8001fde:	2800      	cmp	r0, #0
 8001fe0:	d1e2      	bne.n	8001fa8 <__ssputs_r+0x70>
 8001fe2:	6921      	ldr	r1, [r4, #16]
 8001fe4:	4650      	mov	r0, sl
 8001fe6:	f000 fab3 	bl	8002550 <_free_r>
 8001fea:	e7c8      	b.n	8001f7e <__ssputs_r+0x46>

08001fec <_svfiprintf_r>:
 8001fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ff0:	461d      	mov	r5, r3
 8001ff2:	898b      	ldrh	r3, [r1, #12]
 8001ff4:	b09d      	sub	sp, #116	; 0x74
 8001ff6:	061f      	lsls	r7, r3, #24
 8001ff8:	4680      	mov	r8, r0
 8001ffa:	460c      	mov	r4, r1
 8001ffc:	4616      	mov	r6, r2
 8001ffe:	d50f      	bpl.n	8002020 <_svfiprintf_r+0x34>
 8002000:	690b      	ldr	r3, [r1, #16]
 8002002:	b96b      	cbnz	r3, 8002020 <_svfiprintf_r+0x34>
 8002004:	2140      	movs	r1, #64	; 0x40
 8002006:	f000 faef 	bl	80025e8 <_malloc_r>
 800200a:	6020      	str	r0, [r4, #0]
 800200c:	6120      	str	r0, [r4, #16]
 800200e:	b928      	cbnz	r0, 800201c <_svfiprintf_r+0x30>
 8002010:	230c      	movs	r3, #12
 8002012:	f8c8 3000 	str.w	r3, [r8]
 8002016:	f04f 30ff 	mov.w	r0, #4294967295
 800201a:	e0c8      	b.n	80021ae <_svfiprintf_r+0x1c2>
 800201c:	2340      	movs	r3, #64	; 0x40
 800201e:	6163      	str	r3, [r4, #20]
 8002020:	2300      	movs	r3, #0
 8002022:	9309      	str	r3, [sp, #36]	; 0x24
 8002024:	2320      	movs	r3, #32
 8002026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800202a:	2330      	movs	r3, #48	; 0x30
 800202c:	f04f 0b01 	mov.w	fp, #1
 8002030:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002034:	9503      	str	r5, [sp, #12]
 8002036:	4637      	mov	r7, r6
 8002038:	463d      	mov	r5, r7
 800203a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800203e:	b10b      	cbz	r3, 8002044 <_svfiprintf_r+0x58>
 8002040:	2b25      	cmp	r3, #37	; 0x25
 8002042:	d13e      	bne.n	80020c2 <_svfiprintf_r+0xd6>
 8002044:	ebb7 0a06 	subs.w	sl, r7, r6
 8002048:	d00b      	beq.n	8002062 <_svfiprintf_r+0x76>
 800204a:	4653      	mov	r3, sl
 800204c:	4632      	mov	r2, r6
 800204e:	4621      	mov	r1, r4
 8002050:	4640      	mov	r0, r8
 8002052:	f7ff ff71 	bl	8001f38 <__ssputs_r>
 8002056:	3001      	adds	r0, #1
 8002058:	f000 80a4 	beq.w	80021a4 <_svfiprintf_r+0x1b8>
 800205c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800205e:	4453      	add	r3, sl
 8002060:	9309      	str	r3, [sp, #36]	; 0x24
 8002062:	783b      	ldrb	r3, [r7, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 809d 	beq.w	80021a4 <_svfiprintf_r+0x1b8>
 800206a:	2300      	movs	r3, #0
 800206c:	f04f 32ff 	mov.w	r2, #4294967295
 8002070:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002074:	9304      	str	r3, [sp, #16]
 8002076:	9307      	str	r3, [sp, #28]
 8002078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800207c:	931a      	str	r3, [sp, #104]	; 0x68
 800207e:	462f      	mov	r7, r5
 8002080:	2205      	movs	r2, #5
 8002082:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002086:	4850      	ldr	r0, [pc, #320]	; (80021c8 <_svfiprintf_r+0x1dc>)
 8002088:	f000 fa30 	bl	80024ec <memchr>
 800208c:	9b04      	ldr	r3, [sp, #16]
 800208e:	b9d0      	cbnz	r0, 80020c6 <_svfiprintf_r+0xda>
 8002090:	06d9      	lsls	r1, r3, #27
 8002092:	bf44      	itt	mi
 8002094:	2220      	movmi	r2, #32
 8002096:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800209a:	071a      	lsls	r2, r3, #28
 800209c:	bf44      	itt	mi
 800209e:	222b      	movmi	r2, #43	; 0x2b
 80020a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80020a4:	782a      	ldrb	r2, [r5, #0]
 80020a6:	2a2a      	cmp	r2, #42	; 0x2a
 80020a8:	d015      	beq.n	80020d6 <_svfiprintf_r+0xea>
 80020aa:	462f      	mov	r7, r5
 80020ac:	2000      	movs	r0, #0
 80020ae:	250a      	movs	r5, #10
 80020b0:	9a07      	ldr	r2, [sp, #28]
 80020b2:	4639      	mov	r1, r7
 80020b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80020b8:	3b30      	subs	r3, #48	; 0x30
 80020ba:	2b09      	cmp	r3, #9
 80020bc:	d94d      	bls.n	800215a <_svfiprintf_r+0x16e>
 80020be:	b1b8      	cbz	r0, 80020f0 <_svfiprintf_r+0x104>
 80020c0:	e00f      	b.n	80020e2 <_svfiprintf_r+0xf6>
 80020c2:	462f      	mov	r7, r5
 80020c4:	e7b8      	b.n	8002038 <_svfiprintf_r+0x4c>
 80020c6:	4a40      	ldr	r2, [pc, #256]	; (80021c8 <_svfiprintf_r+0x1dc>)
 80020c8:	463d      	mov	r5, r7
 80020ca:	1a80      	subs	r0, r0, r2
 80020cc:	fa0b f000 	lsl.w	r0, fp, r0
 80020d0:	4318      	orrs	r0, r3
 80020d2:	9004      	str	r0, [sp, #16]
 80020d4:	e7d3      	b.n	800207e <_svfiprintf_r+0x92>
 80020d6:	9a03      	ldr	r2, [sp, #12]
 80020d8:	1d11      	adds	r1, r2, #4
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	9103      	str	r1, [sp, #12]
 80020de:	2a00      	cmp	r2, #0
 80020e0:	db01      	blt.n	80020e6 <_svfiprintf_r+0xfa>
 80020e2:	9207      	str	r2, [sp, #28]
 80020e4:	e004      	b.n	80020f0 <_svfiprintf_r+0x104>
 80020e6:	4252      	negs	r2, r2
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	9207      	str	r2, [sp, #28]
 80020ee:	9304      	str	r3, [sp, #16]
 80020f0:	783b      	ldrb	r3, [r7, #0]
 80020f2:	2b2e      	cmp	r3, #46	; 0x2e
 80020f4:	d10c      	bne.n	8002110 <_svfiprintf_r+0x124>
 80020f6:	787b      	ldrb	r3, [r7, #1]
 80020f8:	2b2a      	cmp	r3, #42	; 0x2a
 80020fa:	d133      	bne.n	8002164 <_svfiprintf_r+0x178>
 80020fc:	9b03      	ldr	r3, [sp, #12]
 80020fe:	3702      	adds	r7, #2
 8002100:	1d1a      	adds	r2, r3, #4
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	9203      	str	r2, [sp, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	bfb8      	it	lt
 800210a:	f04f 33ff 	movlt.w	r3, #4294967295
 800210e:	9305      	str	r3, [sp, #20]
 8002110:	4d2e      	ldr	r5, [pc, #184]	; (80021cc <_svfiprintf_r+0x1e0>)
 8002112:	2203      	movs	r2, #3
 8002114:	7839      	ldrb	r1, [r7, #0]
 8002116:	4628      	mov	r0, r5
 8002118:	f000 f9e8 	bl	80024ec <memchr>
 800211c:	b138      	cbz	r0, 800212e <_svfiprintf_r+0x142>
 800211e:	2340      	movs	r3, #64	; 0x40
 8002120:	1b40      	subs	r0, r0, r5
 8002122:	fa03 f000 	lsl.w	r0, r3, r0
 8002126:	9b04      	ldr	r3, [sp, #16]
 8002128:	3701      	adds	r7, #1
 800212a:	4303      	orrs	r3, r0
 800212c:	9304      	str	r3, [sp, #16]
 800212e:	7839      	ldrb	r1, [r7, #0]
 8002130:	2206      	movs	r2, #6
 8002132:	4827      	ldr	r0, [pc, #156]	; (80021d0 <_svfiprintf_r+0x1e4>)
 8002134:	1c7e      	adds	r6, r7, #1
 8002136:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800213a:	f000 f9d7 	bl	80024ec <memchr>
 800213e:	2800      	cmp	r0, #0
 8002140:	d038      	beq.n	80021b4 <_svfiprintf_r+0x1c8>
 8002142:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <_svfiprintf_r+0x1e8>)
 8002144:	bb13      	cbnz	r3, 800218c <_svfiprintf_r+0x1a0>
 8002146:	9b03      	ldr	r3, [sp, #12]
 8002148:	3307      	adds	r3, #7
 800214a:	f023 0307 	bic.w	r3, r3, #7
 800214e:	3308      	adds	r3, #8
 8002150:	9303      	str	r3, [sp, #12]
 8002152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002154:	444b      	add	r3, r9
 8002156:	9309      	str	r3, [sp, #36]	; 0x24
 8002158:	e76d      	b.n	8002036 <_svfiprintf_r+0x4a>
 800215a:	fb05 3202 	mla	r2, r5, r2, r3
 800215e:	2001      	movs	r0, #1
 8002160:	460f      	mov	r7, r1
 8002162:	e7a6      	b.n	80020b2 <_svfiprintf_r+0xc6>
 8002164:	2300      	movs	r3, #0
 8002166:	250a      	movs	r5, #10
 8002168:	4619      	mov	r1, r3
 800216a:	3701      	adds	r7, #1
 800216c:	9305      	str	r3, [sp, #20]
 800216e:	4638      	mov	r0, r7
 8002170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002174:	3a30      	subs	r2, #48	; 0x30
 8002176:	2a09      	cmp	r2, #9
 8002178:	d903      	bls.n	8002182 <_svfiprintf_r+0x196>
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0c8      	beq.n	8002110 <_svfiprintf_r+0x124>
 800217e:	9105      	str	r1, [sp, #20]
 8002180:	e7c6      	b.n	8002110 <_svfiprintf_r+0x124>
 8002182:	fb05 2101 	mla	r1, r5, r1, r2
 8002186:	2301      	movs	r3, #1
 8002188:	4607      	mov	r7, r0
 800218a:	e7f0      	b.n	800216e <_svfiprintf_r+0x182>
 800218c:	ab03      	add	r3, sp, #12
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	4622      	mov	r2, r4
 8002192:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <_svfiprintf_r+0x1ec>)
 8002194:	a904      	add	r1, sp, #16
 8002196:	4640      	mov	r0, r8
 8002198:	f3af 8000 	nop.w
 800219c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80021a0:	4681      	mov	r9, r0
 80021a2:	d1d6      	bne.n	8002152 <_svfiprintf_r+0x166>
 80021a4:	89a3      	ldrh	r3, [r4, #12]
 80021a6:	065b      	lsls	r3, r3, #25
 80021a8:	f53f af35 	bmi.w	8002016 <_svfiprintf_r+0x2a>
 80021ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80021ae:	b01d      	add	sp, #116	; 0x74
 80021b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021b4:	ab03      	add	r3, sp, #12
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	4622      	mov	r2, r4
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <_svfiprintf_r+0x1ec>)
 80021bc:	a904      	add	r1, sp, #16
 80021be:	4640      	mov	r0, r8
 80021c0:	f000 f882 	bl	80022c8 <_printf_i>
 80021c4:	e7ea      	b.n	800219c <_svfiprintf_r+0x1b0>
 80021c6:	bf00      	nop
 80021c8:	08002778 	.word	0x08002778
 80021cc:	0800277e 	.word	0x0800277e
 80021d0:	08002782 	.word	0x08002782
 80021d4:	00000000 	.word	0x00000000
 80021d8:	08001f39 	.word	0x08001f39

080021dc <_printf_common>:
 80021dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021e0:	4691      	mov	r9, r2
 80021e2:	461f      	mov	r7, r3
 80021e4:	688a      	ldr	r2, [r1, #8]
 80021e6:	690b      	ldr	r3, [r1, #16]
 80021e8:	4606      	mov	r6, r0
 80021ea:	4293      	cmp	r3, r2
 80021ec:	bfb8      	it	lt
 80021ee:	4613      	movlt	r3, r2
 80021f0:	f8c9 3000 	str.w	r3, [r9]
 80021f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80021f8:	460c      	mov	r4, r1
 80021fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80021fe:	b112      	cbz	r2, 8002206 <_printf_common+0x2a>
 8002200:	3301      	adds	r3, #1
 8002202:	f8c9 3000 	str.w	r3, [r9]
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	0699      	lsls	r1, r3, #26
 800220a:	bf42      	ittt	mi
 800220c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002210:	3302      	addmi	r3, #2
 8002212:	f8c9 3000 	strmi.w	r3, [r9]
 8002216:	6825      	ldr	r5, [r4, #0]
 8002218:	f015 0506 	ands.w	r5, r5, #6
 800221c:	d107      	bne.n	800222e <_printf_common+0x52>
 800221e:	f104 0a19 	add.w	sl, r4, #25
 8002222:	68e3      	ldr	r3, [r4, #12]
 8002224:	f8d9 2000 	ldr.w	r2, [r9]
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	42ab      	cmp	r3, r5
 800222c:	dc29      	bgt.n	8002282 <_printf_common+0xa6>
 800222e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002232:	6822      	ldr	r2, [r4, #0]
 8002234:	3300      	adds	r3, #0
 8002236:	bf18      	it	ne
 8002238:	2301      	movne	r3, #1
 800223a:	0692      	lsls	r2, r2, #26
 800223c:	d42e      	bmi.n	800229c <_printf_common+0xc0>
 800223e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002242:	4639      	mov	r1, r7
 8002244:	4630      	mov	r0, r6
 8002246:	47c0      	blx	r8
 8002248:	3001      	adds	r0, #1
 800224a:	d021      	beq.n	8002290 <_printf_common+0xb4>
 800224c:	6823      	ldr	r3, [r4, #0]
 800224e:	68e5      	ldr	r5, [r4, #12]
 8002250:	f003 0306 	and.w	r3, r3, #6
 8002254:	2b04      	cmp	r3, #4
 8002256:	bf18      	it	ne
 8002258:	2500      	movne	r5, #0
 800225a:	f8d9 2000 	ldr.w	r2, [r9]
 800225e:	f04f 0900 	mov.w	r9, #0
 8002262:	bf08      	it	eq
 8002264:	1aad      	subeq	r5, r5, r2
 8002266:	68a3      	ldr	r3, [r4, #8]
 8002268:	6922      	ldr	r2, [r4, #16]
 800226a:	bf08      	it	eq
 800226c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002270:	4293      	cmp	r3, r2
 8002272:	bfc4      	itt	gt
 8002274:	1a9b      	subgt	r3, r3, r2
 8002276:	18ed      	addgt	r5, r5, r3
 8002278:	341a      	adds	r4, #26
 800227a:	454d      	cmp	r5, r9
 800227c:	d11a      	bne.n	80022b4 <_printf_common+0xd8>
 800227e:	2000      	movs	r0, #0
 8002280:	e008      	b.n	8002294 <_printf_common+0xb8>
 8002282:	2301      	movs	r3, #1
 8002284:	4652      	mov	r2, sl
 8002286:	4639      	mov	r1, r7
 8002288:	4630      	mov	r0, r6
 800228a:	47c0      	blx	r8
 800228c:	3001      	adds	r0, #1
 800228e:	d103      	bne.n	8002298 <_printf_common+0xbc>
 8002290:	f04f 30ff 	mov.w	r0, #4294967295
 8002294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002298:	3501      	adds	r5, #1
 800229a:	e7c2      	b.n	8002222 <_printf_common+0x46>
 800229c:	2030      	movs	r0, #48	; 0x30
 800229e:	18e1      	adds	r1, r4, r3
 80022a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80022aa:	4422      	add	r2, r4
 80022ac:	3302      	adds	r3, #2
 80022ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80022b2:	e7c4      	b.n	800223e <_printf_common+0x62>
 80022b4:	2301      	movs	r3, #1
 80022b6:	4622      	mov	r2, r4
 80022b8:	4639      	mov	r1, r7
 80022ba:	4630      	mov	r0, r6
 80022bc:	47c0      	blx	r8
 80022be:	3001      	adds	r0, #1
 80022c0:	d0e6      	beq.n	8002290 <_printf_common+0xb4>
 80022c2:	f109 0901 	add.w	r9, r9, #1
 80022c6:	e7d8      	b.n	800227a <_printf_common+0x9e>

080022c8 <_printf_i>:
 80022c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80022d0:	460c      	mov	r4, r1
 80022d2:	7e09      	ldrb	r1, [r1, #24]
 80022d4:	b085      	sub	sp, #20
 80022d6:	296e      	cmp	r1, #110	; 0x6e
 80022d8:	4617      	mov	r7, r2
 80022da:	4606      	mov	r6, r0
 80022dc:	4698      	mov	r8, r3
 80022de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80022e0:	f000 80b3 	beq.w	800244a <_printf_i+0x182>
 80022e4:	d822      	bhi.n	800232c <_printf_i+0x64>
 80022e6:	2963      	cmp	r1, #99	; 0x63
 80022e8:	d036      	beq.n	8002358 <_printf_i+0x90>
 80022ea:	d80a      	bhi.n	8002302 <_printf_i+0x3a>
 80022ec:	2900      	cmp	r1, #0
 80022ee:	f000 80b9 	beq.w	8002464 <_printf_i+0x19c>
 80022f2:	2958      	cmp	r1, #88	; 0x58
 80022f4:	f000 8083 	beq.w	80023fe <_printf_i+0x136>
 80022f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002300:	e032      	b.n	8002368 <_printf_i+0xa0>
 8002302:	2964      	cmp	r1, #100	; 0x64
 8002304:	d001      	beq.n	800230a <_printf_i+0x42>
 8002306:	2969      	cmp	r1, #105	; 0x69
 8002308:	d1f6      	bne.n	80022f8 <_printf_i+0x30>
 800230a:	6820      	ldr	r0, [r4, #0]
 800230c:	6813      	ldr	r3, [r2, #0]
 800230e:	0605      	lsls	r5, r0, #24
 8002310:	f103 0104 	add.w	r1, r3, #4
 8002314:	d52a      	bpl.n	800236c <_printf_i+0xa4>
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6011      	str	r1, [r2, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	da03      	bge.n	8002326 <_printf_i+0x5e>
 800231e:	222d      	movs	r2, #45	; 0x2d
 8002320:	425b      	negs	r3, r3
 8002322:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002326:	486f      	ldr	r0, [pc, #444]	; (80024e4 <_printf_i+0x21c>)
 8002328:	220a      	movs	r2, #10
 800232a:	e039      	b.n	80023a0 <_printf_i+0xd8>
 800232c:	2973      	cmp	r1, #115	; 0x73
 800232e:	f000 809d 	beq.w	800246c <_printf_i+0x1a4>
 8002332:	d808      	bhi.n	8002346 <_printf_i+0x7e>
 8002334:	296f      	cmp	r1, #111	; 0x6f
 8002336:	d020      	beq.n	800237a <_printf_i+0xb2>
 8002338:	2970      	cmp	r1, #112	; 0x70
 800233a:	d1dd      	bne.n	80022f8 <_printf_i+0x30>
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	f043 0320 	orr.w	r3, r3, #32
 8002342:	6023      	str	r3, [r4, #0]
 8002344:	e003      	b.n	800234e <_printf_i+0x86>
 8002346:	2975      	cmp	r1, #117	; 0x75
 8002348:	d017      	beq.n	800237a <_printf_i+0xb2>
 800234a:	2978      	cmp	r1, #120	; 0x78
 800234c:	d1d4      	bne.n	80022f8 <_printf_i+0x30>
 800234e:	2378      	movs	r3, #120	; 0x78
 8002350:	4865      	ldr	r0, [pc, #404]	; (80024e8 <_printf_i+0x220>)
 8002352:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002356:	e055      	b.n	8002404 <_printf_i+0x13c>
 8002358:	6813      	ldr	r3, [r2, #0]
 800235a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800235e:	1d19      	adds	r1, r3, #4
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6011      	str	r1, [r2, #0]
 8002364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002368:	2301      	movs	r3, #1
 800236a:	e08c      	b.n	8002486 <_printf_i+0x1be>
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002372:	6011      	str	r1, [r2, #0]
 8002374:	bf18      	it	ne
 8002376:	b21b      	sxthne	r3, r3
 8002378:	e7cf      	b.n	800231a <_printf_i+0x52>
 800237a:	6813      	ldr	r3, [r2, #0]
 800237c:	6825      	ldr	r5, [r4, #0]
 800237e:	1d18      	adds	r0, r3, #4
 8002380:	6010      	str	r0, [r2, #0]
 8002382:	0628      	lsls	r0, r5, #24
 8002384:	d501      	bpl.n	800238a <_printf_i+0xc2>
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	e002      	b.n	8002390 <_printf_i+0xc8>
 800238a:	0668      	lsls	r0, r5, #25
 800238c:	d5fb      	bpl.n	8002386 <_printf_i+0xbe>
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	296f      	cmp	r1, #111	; 0x6f
 8002392:	bf14      	ite	ne
 8002394:	220a      	movne	r2, #10
 8002396:	2208      	moveq	r2, #8
 8002398:	4852      	ldr	r0, [pc, #328]	; (80024e4 <_printf_i+0x21c>)
 800239a:	2100      	movs	r1, #0
 800239c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80023a0:	6865      	ldr	r5, [r4, #4]
 80023a2:	2d00      	cmp	r5, #0
 80023a4:	60a5      	str	r5, [r4, #8]
 80023a6:	f2c0 8095 	blt.w	80024d4 <_printf_i+0x20c>
 80023aa:	6821      	ldr	r1, [r4, #0]
 80023ac:	f021 0104 	bic.w	r1, r1, #4
 80023b0:	6021      	str	r1, [r4, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d13d      	bne.n	8002432 <_printf_i+0x16a>
 80023b6:	2d00      	cmp	r5, #0
 80023b8:	f040 808e 	bne.w	80024d8 <_printf_i+0x210>
 80023bc:	4665      	mov	r5, ip
 80023be:	2a08      	cmp	r2, #8
 80023c0:	d10b      	bne.n	80023da <_printf_i+0x112>
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	07db      	lsls	r3, r3, #31
 80023c6:	d508      	bpl.n	80023da <_printf_i+0x112>
 80023c8:	6923      	ldr	r3, [r4, #16]
 80023ca:	6862      	ldr	r2, [r4, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	bfde      	ittt	le
 80023d0:	2330      	movle	r3, #48	; 0x30
 80023d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80023d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80023da:	ebac 0305 	sub.w	r3, ip, r5
 80023de:	6123      	str	r3, [r4, #16]
 80023e0:	f8cd 8000 	str.w	r8, [sp]
 80023e4:	463b      	mov	r3, r7
 80023e6:	aa03      	add	r2, sp, #12
 80023e8:	4621      	mov	r1, r4
 80023ea:	4630      	mov	r0, r6
 80023ec:	f7ff fef6 	bl	80021dc <_printf_common>
 80023f0:	3001      	adds	r0, #1
 80023f2:	d14d      	bne.n	8002490 <_printf_i+0x1c8>
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	b005      	add	sp, #20
 80023fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023fe:	4839      	ldr	r0, [pc, #228]	; (80024e4 <_printf_i+0x21c>)
 8002400:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002404:	6813      	ldr	r3, [r2, #0]
 8002406:	6821      	ldr	r1, [r4, #0]
 8002408:	1d1d      	adds	r5, r3, #4
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6015      	str	r5, [r2, #0]
 800240e:	060a      	lsls	r2, r1, #24
 8002410:	d50b      	bpl.n	800242a <_printf_i+0x162>
 8002412:	07ca      	lsls	r2, r1, #31
 8002414:	bf44      	itt	mi
 8002416:	f041 0120 	orrmi.w	r1, r1, #32
 800241a:	6021      	strmi	r1, [r4, #0]
 800241c:	b91b      	cbnz	r3, 8002426 <_printf_i+0x15e>
 800241e:	6822      	ldr	r2, [r4, #0]
 8002420:	f022 0220 	bic.w	r2, r2, #32
 8002424:	6022      	str	r2, [r4, #0]
 8002426:	2210      	movs	r2, #16
 8002428:	e7b7      	b.n	800239a <_printf_i+0xd2>
 800242a:	064d      	lsls	r5, r1, #25
 800242c:	bf48      	it	mi
 800242e:	b29b      	uxthmi	r3, r3
 8002430:	e7ef      	b.n	8002412 <_printf_i+0x14a>
 8002432:	4665      	mov	r5, ip
 8002434:	fbb3 f1f2 	udiv	r1, r3, r2
 8002438:	fb02 3311 	mls	r3, r2, r1, r3
 800243c:	5cc3      	ldrb	r3, [r0, r3]
 800243e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002442:	460b      	mov	r3, r1
 8002444:	2900      	cmp	r1, #0
 8002446:	d1f5      	bne.n	8002434 <_printf_i+0x16c>
 8002448:	e7b9      	b.n	80023be <_printf_i+0xf6>
 800244a:	6813      	ldr	r3, [r2, #0]
 800244c:	6825      	ldr	r5, [r4, #0]
 800244e:	1d18      	adds	r0, r3, #4
 8002450:	6961      	ldr	r1, [r4, #20]
 8002452:	6010      	str	r0, [r2, #0]
 8002454:	0628      	lsls	r0, r5, #24
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	d501      	bpl.n	800245e <_printf_i+0x196>
 800245a:	6019      	str	r1, [r3, #0]
 800245c:	e002      	b.n	8002464 <_printf_i+0x19c>
 800245e:	066a      	lsls	r2, r5, #25
 8002460:	d5fb      	bpl.n	800245a <_printf_i+0x192>
 8002462:	8019      	strh	r1, [r3, #0]
 8002464:	2300      	movs	r3, #0
 8002466:	4665      	mov	r5, ip
 8002468:	6123      	str	r3, [r4, #16]
 800246a:	e7b9      	b.n	80023e0 <_printf_i+0x118>
 800246c:	6813      	ldr	r3, [r2, #0]
 800246e:	1d19      	adds	r1, r3, #4
 8002470:	6011      	str	r1, [r2, #0]
 8002472:	681d      	ldr	r5, [r3, #0]
 8002474:	6862      	ldr	r2, [r4, #4]
 8002476:	2100      	movs	r1, #0
 8002478:	4628      	mov	r0, r5
 800247a:	f000 f837 	bl	80024ec <memchr>
 800247e:	b108      	cbz	r0, 8002484 <_printf_i+0x1bc>
 8002480:	1b40      	subs	r0, r0, r5
 8002482:	6060      	str	r0, [r4, #4]
 8002484:	6863      	ldr	r3, [r4, #4]
 8002486:	6123      	str	r3, [r4, #16]
 8002488:	2300      	movs	r3, #0
 800248a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800248e:	e7a7      	b.n	80023e0 <_printf_i+0x118>
 8002490:	6923      	ldr	r3, [r4, #16]
 8002492:	462a      	mov	r2, r5
 8002494:	4639      	mov	r1, r7
 8002496:	4630      	mov	r0, r6
 8002498:	47c0      	blx	r8
 800249a:	3001      	adds	r0, #1
 800249c:	d0aa      	beq.n	80023f4 <_printf_i+0x12c>
 800249e:	6823      	ldr	r3, [r4, #0]
 80024a0:	079b      	lsls	r3, r3, #30
 80024a2:	d413      	bmi.n	80024cc <_printf_i+0x204>
 80024a4:	68e0      	ldr	r0, [r4, #12]
 80024a6:	9b03      	ldr	r3, [sp, #12]
 80024a8:	4298      	cmp	r0, r3
 80024aa:	bfb8      	it	lt
 80024ac:	4618      	movlt	r0, r3
 80024ae:	e7a3      	b.n	80023f8 <_printf_i+0x130>
 80024b0:	2301      	movs	r3, #1
 80024b2:	464a      	mov	r2, r9
 80024b4:	4639      	mov	r1, r7
 80024b6:	4630      	mov	r0, r6
 80024b8:	47c0      	blx	r8
 80024ba:	3001      	adds	r0, #1
 80024bc:	d09a      	beq.n	80023f4 <_printf_i+0x12c>
 80024be:	3501      	adds	r5, #1
 80024c0:	68e3      	ldr	r3, [r4, #12]
 80024c2:	9a03      	ldr	r2, [sp, #12]
 80024c4:	1a9b      	subs	r3, r3, r2
 80024c6:	42ab      	cmp	r3, r5
 80024c8:	dcf2      	bgt.n	80024b0 <_printf_i+0x1e8>
 80024ca:	e7eb      	b.n	80024a4 <_printf_i+0x1dc>
 80024cc:	2500      	movs	r5, #0
 80024ce:	f104 0919 	add.w	r9, r4, #25
 80024d2:	e7f5      	b.n	80024c0 <_printf_i+0x1f8>
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1ac      	bne.n	8002432 <_printf_i+0x16a>
 80024d8:	7803      	ldrb	r3, [r0, #0]
 80024da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024e2:	e76c      	b.n	80023be <_printf_i+0xf6>
 80024e4:	08002789 	.word	0x08002789
 80024e8:	0800279a 	.word	0x0800279a

080024ec <memchr>:
 80024ec:	b510      	push	{r4, lr}
 80024ee:	b2c9      	uxtb	r1, r1
 80024f0:	4402      	add	r2, r0
 80024f2:	4290      	cmp	r0, r2
 80024f4:	4603      	mov	r3, r0
 80024f6:	d101      	bne.n	80024fc <memchr+0x10>
 80024f8:	2300      	movs	r3, #0
 80024fa:	e003      	b.n	8002504 <memchr+0x18>
 80024fc:	781c      	ldrb	r4, [r3, #0]
 80024fe:	3001      	adds	r0, #1
 8002500:	428c      	cmp	r4, r1
 8002502:	d1f6      	bne.n	80024f2 <memchr+0x6>
 8002504:	4618      	mov	r0, r3
 8002506:	bd10      	pop	{r4, pc}

08002508 <memcpy>:
 8002508:	b510      	push	{r4, lr}
 800250a:	1e43      	subs	r3, r0, #1
 800250c:	440a      	add	r2, r1
 800250e:	4291      	cmp	r1, r2
 8002510:	d100      	bne.n	8002514 <memcpy+0xc>
 8002512:	bd10      	pop	{r4, pc}
 8002514:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002518:	f803 4f01 	strb.w	r4, [r3, #1]!
 800251c:	e7f7      	b.n	800250e <memcpy+0x6>

0800251e <memmove>:
 800251e:	4288      	cmp	r0, r1
 8002520:	b510      	push	{r4, lr}
 8002522:	eb01 0302 	add.w	r3, r1, r2
 8002526:	d807      	bhi.n	8002538 <memmove+0x1a>
 8002528:	1e42      	subs	r2, r0, #1
 800252a:	4299      	cmp	r1, r3
 800252c:	d00a      	beq.n	8002544 <memmove+0x26>
 800252e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002532:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002536:	e7f8      	b.n	800252a <memmove+0xc>
 8002538:	4283      	cmp	r3, r0
 800253a:	d9f5      	bls.n	8002528 <memmove+0xa>
 800253c:	1881      	adds	r1, r0, r2
 800253e:	1ad2      	subs	r2, r2, r3
 8002540:	42d3      	cmn	r3, r2
 8002542:	d100      	bne.n	8002546 <memmove+0x28>
 8002544:	bd10      	pop	{r4, pc}
 8002546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800254a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800254e:	e7f7      	b.n	8002540 <memmove+0x22>

08002550 <_free_r>:
 8002550:	b538      	push	{r3, r4, r5, lr}
 8002552:	4605      	mov	r5, r0
 8002554:	2900      	cmp	r1, #0
 8002556:	d043      	beq.n	80025e0 <_free_r+0x90>
 8002558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800255c:	1f0c      	subs	r4, r1, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	bfb8      	it	lt
 8002562:	18e4      	addlt	r4, r4, r3
 8002564:	f000 f8d0 	bl	8002708 <__malloc_lock>
 8002568:	4a1e      	ldr	r2, [pc, #120]	; (80025e4 <_free_r+0x94>)
 800256a:	6813      	ldr	r3, [r2, #0]
 800256c:	4610      	mov	r0, r2
 800256e:	b933      	cbnz	r3, 800257e <_free_r+0x2e>
 8002570:	6063      	str	r3, [r4, #4]
 8002572:	6014      	str	r4, [r2, #0]
 8002574:	4628      	mov	r0, r5
 8002576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800257a:	f000 b8c6 	b.w	800270a <__malloc_unlock>
 800257e:	42a3      	cmp	r3, r4
 8002580:	d90b      	bls.n	800259a <_free_r+0x4a>
 8002582:	6821      	ldr	r1, [r4, #0]
 8002584:	1862      	adds	r2, r4, r1
 8002586:	4293      	cmp	r3, r2
 8002588:	bf01      	itttt	eq
 800258a:	681a      	ldreq	r2, [r3, #0]
 800258c:	685b      	ldreq	r3, [r3, #4]
 800258e:	1852      	addeq	r2, r2, r1
 8002590:	6022      	streq	r2, [r4, #0]
 8002592:	6063      	str	r3, [r4, #4]
 8002594:	6004      	str	r4, [r0, #0]
 8002596:	e7ed      	b.n	8002574 <_free_r+0x24>
 8002598:	4613      	mov	r3, r2
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	b10a      	cbz	r2, 80025a2 <_free_r+0x52>
 800259e:	42a2      	cmp	r2, r4
 80025a0:	d9fa      	bls.n	8002598 <_free_r+0x48>
 80025a2:	6819      	ldr	r1, [r3, #0]
 80025a4:	1858      	adds	r0, r3, r1
 80025a6:	42a0      	cmp	r0, r4
 80025a8:	d10b      	bne.n	80025c2 <_free_r+0x72>
 80025aa:	6820      	ldr	r0, [r4, #0]
 80025ac:	4401      	add	r1, r0
 80025ae:	1858      	adds	r0, r3, r1
 80025b0:	4282      	cmp	r2, r0
 80025b2:	6019      	str	r1, [r3, #0]
 80025b4:	d1de      	bne.n	8002574 <_free_r+0x24>
 80025b6:	6810      	ldr	r0, [r2, #0]
 80025b8:	6852      	ldr	r2, [r2, #4]
 80025ba:	4401      	add	r1, r0
 80025bc:	6019      	str	r1, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	e7d8      	b.n	8002574 <_free_r+0x24>
 80025c2:	d902      	bls.n	80025ca <_free_r+0x7a>
 80025c4:	230c      	movs	r3, #12
 80025c6:	602b      	str	r3, [r5, #0]
 80025c8:	e7d4      	b.n	8002574 <_free_r+0x24>
 80025ca:	6820      	ldr	r0, [r4, #0]
 80025cc:	1821      	adds	r1, r4, r0
 80025ce:	428a      	cmp	r2, r1
 80025d0:	bf01      	itttt	eq
 80025d2:	6811      	ldreq	r1, [r2, #0]
 80025d4:	6852      	ldreq	r2, [r2, #4]
 80025d6:	1809      	addeq	r1, r1, r0
 80025d8:	6021      	streq	r1, [r4, #0]
 80025da:	6062      	str	r2, [r4, #4]
 80025dc:	605c      	str	r4, [r3, #4]
 80025de:	e7c9      	b.n	8002574 <_free_r+0x24>
 80025e0:	bd38      	pop	{r3, r4, r5, pc}
 80025e2:	bf00      	nop
 80025e4:	20000090 	.word	0x20000090

080025e8 <_malloc_r>:
 80025e8:	b570      	push	{r4, r5, r6, lr}
 80025ea:	1ccd      	adds	r5, r1, #3
 80025ec:	f025 0503 	bic.w	r5, r5, #3
 80025f0:	3508      	adds	r5, #8
 80025f2:	2d0c      	cmp	r5, #12
 80025f4:	bf38      	it	cc
 80025f6:	250c      	movcc	r5, #12
 80025f8:	2d00      	cmp	r5, #0
 80025fa:	4606      	mov	r6, r0
 80025fc:	db01      	blt.n	8002602 <_malloc_r+0x1a>
 80025fe:	42a9      	cmp	r1, r5
 8002600:	d903      	bls.n	800260a <_malloc_r+0x22>
 8002602:	230c      	movs	r3, #12
 8002604:	6033      	str	r3, [r6, #0]
 8002606:	2000      	movs	r0, #0
 8002608:	bd70      	pop	{r4, r5, r6, pc}
 800260a:	f000 f87d 	bl	8002708 <__malloc_lock>
 800260e:	4a21      	ldr	r2, [pc, #132]	; (8002694 <_malloc_r+0xac>)
 8002610:	6814      	ldr	r4, [r2, #0]
 8002612:	4621      	mov	r1, r4
 8002614:	b991      	cbnz	r1, 800263c <_malloc_r+0x54>
 8002616:	4c20      	ldr	r4, [pc, #128]	; (8002698 <_malloc_r+0xb0>)
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	b91b      	cbnz	r3, 8002624 <_malloc_r+0x3c>
 800261c:	4630      	mov	r0, r6
 800261e:	f000 f863 	bl	80026e8 <_sbrk_r>
 8002622:	6020      	str	r0, [r4, #0]
 8002624:	4629      	mov	r1, r5
 8002626:	4630      	mov	r0, r6
 8002628:	f000 f85e 	bl	80026e8 <_sbrk_r>
 800262c:	1c43      	adds	r3, r0, #1
 800262e:	d124      	bne.n	800267a <_malloc_r+0x92>
 8002630:	230c      	movs	r3, #12
 8002632:	4630      	mov	r0, r6
 8002634:	6033      	str	r3, [r6, #0]
 8002636:	f000 f868 	bl	800270a <__malloc_unlock>
 800263a:	e7e4      	b.n	8002606 <_malloc_r+0x1e>
 800263c:	680b      	ldr	r3, [r1, #0]
 800263e:	1b5b      	subs	r3, r3, r5
 8002640:	d418      	bmi.n	8002674 <_malloc_r+0x8c>
 8002642:	2b0b      	cmp	r3, #11
 8002644:	d90f      	bls.n	8002666 <_malloc_r+0x7e>
 8002646:	600b      	str	r3, [r1, #0]
 8002648:	18cc      	adds	r4, r1, r3
 800264a:	50cd      	str	r5, [r1, r3]
 800264c:	4630      	mov	r0, r6
 800264e:	f000 f85c 	bl	800270a <__malloc_unlock>
 8002652:	f104 000b 	add.w	r0, r4, #11
 8002656:	1d23      	adds	r3, r4, #4
 8002658:	f020 0007 	bic.w	r0, r0, #7
 800265c:	1ac3      	subs	r3, r0, r3
 800265e:	d0d3      	beq.n	8002608 <_malloc_r+0x20>
 8002660:	425a      	negs	r2, r3
 8002662:	50e2      	str	r2, [r4, r3]
 8002664:	e7d0      	b.n	8002608 <_malloc_r+0x20>
 8002666:	684b      	ldr	r3, [r1, #4]
 8002668:	428c      	cmp	r4, r1
 800266a:	bf16      	itet	ne
 800266c:	6063      	strne	r3, [r4, #4]
 800266e:	6013      	streq	r3, [r2, #0]
 8002670:	460c      	movne	r4, r1
 8002672:	e7eb      	b.n	800264c <_malloc_r+0x64>
 8002674:	460c      	mov	r4, r1
 8002676:	6849      	ldr	r1, [r1, #4]
 8002678:	e7cc      	b.n	8002614 <_malloc_r+0x2c>
 800267a:	1cc4      	adds	r4, r0, #3
 800267c:	f024 0403 	bic.w	r4, r4, #3
 8002680:	42a0      	cmp	r0, r4
 8002682:	d005      	beq.n	8002690 <_malloc_r+0xa8>
 8002684:	1a21      	subs	r1, r4, r0
 8002686:	4630      	mov	r0, r6
 8002688:	f000 f82e 	bl	80026e8 <_sbrk_r>
 800268c:	3001      	adds	r0, #1
 800268e:	d0cf      	beq.n	8002630 <_malloc_r+0x48>
 8002690:	6025      	str	r5, [r4, #0]
 8002692:	e7db      	b.n	800264c <_malloc_r+0x64>
 8002694:	20000090 	.word	0x20000090
 8002698:	20000094 	.word	0x20000094

0800269c <_realloc_r>:
 800269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269e:	4607      	mov	r7, r0
 80026a0:	4614      	mov	r4, r2
 80026a2:	460e      	mov	r6, r1
 80026a4:	b921      	cbnz	r1, 80026b0 <_realloc_r+0x14>
 80026a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80026aa:	4611      	mov	r1, r2
 80026ac:	f7ff bf9c 	b.w	80025e8 <_malloc_r>
 80026b0:	b922      	cbnz	r2, 80026bc <_realloc_r+0x20>
 80026b2:	f7ff ff4d 	bl	8002550 <_free_r>
 80026b6:	4625      	mov	r5, r4
 80026b8:	4628      	mov	r0, r5
 80026ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026bc:	f000 f826 	bl	800270c <_malloc_usable_size_r>
 80026c0:	42a0      	cmp	r0, r4
 80026c2:	d20f      	bcs.n	80026e4 <_realloc_r+0x48>
 80026c4:	4621      	mov	r1, r4
 80026c6:	4638      	mov	r0, r7
 80026c8:	f7ff ff8e 	bl	80025e8 <_malloc_r>
 80026cc:	4605      	mov	r5, r0
 80026ce:	2800      	cmp	r0, #0
 80026d0:	d0f2      	beq.n	80026b8 <_realloc_r+0x1c>
 80026d2:	4631      	mov	r1, r6
 80026d4:	4622      	mov	r2, r4
 80026d6:	f7ff ff17 	bl	8002508 <memcpy>
 80026da:	4631      	mov	r1, r6
 80026dc:	4638      	mov	r0, r7
 80026de:	f7ff ff37 	bl	8002550 <_free_r>
 80026e2:	e7e9      	b.n	80026b8 <_realloc_r+0x1c>
 80026e4:	4635      	mov	r5, r6
 80026e6:	e7e7      	b.n	80026b8 <_realloc_r+0x1c>

080026e8 <_sbrk_r>:
 80026e8:	b538      	push	{r3, r4, r5, lr}
 80026ea:	2300      	movs	r3, #0
 80026ec:	4c05      	ldr	r4, [pc, #20]	; (8002704 <_sbrk_r+0x1c>)
 80026ee:	4605      	mov	r5, r0
 80026f0:	4608      	mov	r0, r1
 80026f2:	6023      	str	r3, [r4, #0]
 80026f4:	f7fe f98a 	bl	8000a0c <_sbrk>
 80026f8:	1c43      	adds	r3, r0, #1
 80026fa:	d102      	bne.n	8002702 <_sbrk_r+0x1a>
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	b103      	cbz	r3, 8002702 <_sbrk_r+0x1a>
 8002700:	602b      	str	r3, [r5, #0]
 8002702:	bd38      	pop	{r3, r4, r5, pc}
 8002704:	200002b0 	.word	0x200002b0

08002708 <__malloc_lock>:
 8002708:	4770      	bx	lr

0800270a <__malloc_unlock>:
 800270a:	4770      	bx	lr

0800270c <_malloc_usable_size_r>:
 800270c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002710:	1f18      	subs	r0, r3, #4
 8002712:	2b00      	cmp	r3, #0
 8002714:	bfbc      	itt	lt
 8002716:	580b      	ldrlt	r3, [r1, r0]
 8002718:	18c0      	addlt	r0, r0, r3
 800271a:	4770      	bx	lr

0800271c <_init>:
 800271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271e:	bf00      	nop
 8002720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002722:	bc08      	pop	{r3}
 8002724:	469e      	mov	lr, r3
 8002726:	4770      	bx	lr

08002728 <_fini>:
 8002728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272a:	bf00      	nop
 800272c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800272e:	bc08      	pop	{r3}
 8002730:	469e      	mov	lr, r3
 8002732:	4770      	bx	lr
